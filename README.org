#+TITLE: More Reasonable Emacs
#+AUTHOR: Junjie Mars
#+STARTUP: overview
#+OPTIONS: num:nil toc:nil
#+REVEAL_HLEVEL: 2
#+REVEAL_SLIDE_NUMBER: h
#+REVEAL_THEME: moon
#+BEGIN_COMMENT
#+REVEAL_TRANS: cube
#+REVEAL_MARGIN: 0.1
#+REVEAL_MIN_SCALE: 0.2
#+REVEAL_MAX_SCALE: 1.5
#+END_COMMENT


* Quick start
  :PROPERTIES:
  :CUSTOM_ID: quick-start
  :END:

	[[https://api.travis-ci.org/junjiemars/.emacs.d][https://api.travis-ci.org/junjiemars/.emacs.d.svg?branch=master]]

#+ATTR_HTML: :style text-align:left
It's works on Emacs version 22.1.1+ , provides more reasonable styles:
more organized code, more consistent, more cleaner and more
faster. You can run it on any environment Emacs itself runs on: GUI or
Terminal, even you can run multiple Emacs instances with different
version on the same machine and at the same time.

#+REVEAL: split

- clone More Reasonable Emacs from github
#+BEGIN_SRC sh
git clone --depth=1 https://github.com/junjiemars/.emacs.d.git ~/.emacs.d
#+END_SRC

- open Emacs, after Emacs compile all elisp files, then reopen Emacs
- want more functionalities see [[#cooking][Cooking]] section

#+ATTR_HTML: :style text-align:left
One more thing, it's best to remind you: take care, it's super fast.

#+ATTR_HTML: :style display:none
- [[#story][Story]]
- [[#cooking][Cooking]]
- [[#programming][Programming]]
- [[#troubleshoting][Troubleshoting]]
- [[#mnemonic][Mnemonic]]

* Story
  :PROPERTIES:
  :CUSTOM_ID: story
  :END:

#+ATTR_HTML: :style text-align:left
I'm a nerd with Emacs, it's awesome if I can [[http://edward.oconnor.cx/2009/07/learn-emacs-in-ten-years][Learn Emacs in less then
Ten Years]].  So, I decided to start from Level One not the Level Zero
after read Emacs' tutorial (C-h t). Emacs is the most powerful editor
on the world there is no *one of*, it's programmable, elegant and
/self-documenting/, so you can start from Level Zero if you had time
may be less than 10 years to read and try Emacs.

#+REVEAL: split

#+ATTR_HTML: :style text-align:left
After falling in love with [[https://en.wikipedia.org/wiki/Lisp_(programming_language)][Lisp]], I know it's the time to make Emacs
being a part of my body and mind, not just open a file, navigating,
editing, and save it. The Level One of mine start from [[https://github.com/flyingmachine/emacs-for-clojure][this is a
Clojure-friendly emacs config]], and [[https://github.com/purcell/emacs.d][A reasonable Emacs config]]. But,
those ones neither can suit for my daily use on different machines.

#+REVEAL: split
#+ATTR_HTML: :style text-align:left
The More Reasonable Emacs strives to be fast, stable and hacker
friendly, which can be run on anywhere where Emacs runs.

#+ATTR_HTML: :style display:none
- [[#highlights][Highlights]]
- [[#requirements][Requirements]]
- [[#where][Where]]
- [[#what][What]]
- [[#install][Install]]
- [[#organization][Organization]]

#+REVEAL: split
#+ATTR_HTML: :style text-align:left
Now, let's start from the Level Two. And one more thing: teach
yourself some little Elisp (@@html:<kbd>@@M-x i d m
Elisp@@html:</kbd>@@).

** Highlights
   :PROPERTIES:
   :CUSTOM_ID: highlights
   :END:

- *Carefully designed*: robust, fast and just load what's your want.
- *Adaptive*: can run on any OS, GUI or Terminal, from most recent
  Emacs's versions to ancient ones, and one Emacs's configuration suit
  for all coexisting Emacs on the same machine.
- *Consistent*: wherever and whenever you can play with Emacs always
  behaves in the same way.
- *Awesome style*: [[https://github.com/junjiemars/images/blob/master/.emacs.d/dracula-theme-on-windows.png][Windows]], [[https://github.com/junjiemars/images/blob/master/.emacs.d/dracula-theme-on-darwin.png][Darwin]], and [[https://github.com/junjiemars/images/blob/master/.emacs.d/dracula-theme-on-linux.png][Linux]]

** Requirements
   :PROPERTIES:
   :CUSTOM_ID: requirements
   :END:

- Emacs 22.1.1+
- Keyboard+

** Where
   :PROPERTIES:
   :CUSTOM_ID: where
   :END:

- Linux, whatever GUI or Terminal
- Darwin, whatever GUI or Terminal
- Windows, whatever GUI or Terminal
- Raspberry Pi, Terminal
- No Network
- Docker container
- Run multiple Emacs instances with multiple versions in the same
  machine and at the same time

** What
   :PROPERTIES:
   :CUSTOM_ID: what
   :END:

- You are the master of your Emacs, ...
- Navigating, finding, grepping in the same way wherever, ...
- Org Mode that's your new life, ...
- Reliable programming experiments, C, Lisp, ...
- It's a no-cost extension and git friendly framework.

** Install
   :PROPERTIES:
   :CUSTOM_ID: install
   :END:

#+ATTR_HTML: :style text-align:left
Just one thing you need to do, clone it (just <500KB) to your =HOME=
directory:

#+BEGIN_SRC sh
git clone --depth=1 https://github.com/junjiemars/.emacs.d.git ~/.emacs.d
#+END_SRC

#+REVEAL: split
#+ATTR_HTML: :style text-align:left
First run More Reasonable Emacs, it should automatically do: 
- byte compile elisp source files. 
- install packages, if you allow it.

#+ATTR_HTML: :style text-align:left
After first run More Reasonable Emacs, exit and then /reopen/ Emacs.

#+REVEAL: split
#+ATTR_HTML: :style text-align:left
On Windows, if you'd [[https://git-scm.com/downloads][Git-Bash]] installed but no Emacs, you are lucky, a
one line code will do it all for you and more: fix some Emacs' issue
for you, and you don't need run =git clone ...=,

instead,

#+BEGIN_SRC sh
HAS_EMACS=1 bash <(curl https://raw.githubusercontent.com/junjiemars/kit/master/win/install-win-kits.sh)
#+END_SRC

#+ATTR_HTML: :style text-align:left
Now, it will works perfectly, but if you want to more control and more
features, such as themes, packages, and fonts etc., see next section:
[[#cooking][cooking]]

** Organization
   :PROPERTIES:
   :CUSTOM_ID: organization
   :END:

#+ATTR_HTML: :style text-align:left
 Annotated your Emacs HOME as =(emacs-home*)=.

#+ATTR_HTML: :style text-align:left
Your private configuration directory at =(emacs-home* "private/")=.
All things under it you can rename, move, delete.

#+ATTR_HTML: :style text-align:left
All Elisp files should be compiled, if you meet some trouble, a magic
interactive function =(clean-compiled-files)= should help, run it and
reopen the Emacs.

*** Directory

#+BEGIN_EXAMPLE
    (emacs-home*)
    ├── LICENSE
    ├── README.org
    ├── config (comment "all stuff here")
    ├── elpa (comment "installed packages")
    ├── init.el (comment "Emacs init file")
    ├── private (comment "your configuration can put here")
    │   ├── self-env-spec.el
    │   ├── self-epilogue.el
    │   ├── self-package-spec.el
    │   ├── self-path.el
    │   ├── self-prologue.el
    └── theme (comment "themes directory")
#+END_EXAMPLE

#+REVEAL: split
#+ATTR_HTML: :style text-align:left
Locate your spec via =(emacs-home* "private/self-path.el")=.

#+BEGIN_SRC emacs-lisp
    ;; Run order: :env-spec -> :prelogue -> :package-spec -> :epilogue
    ;; You can point to your Gited Emacs' configuration repo.
    ;; Default samples `self-*.el' in `(emacs-home* "private/")' directory.
    ;; :epilogue run in `after-init-hook'


    (def-self-path-ref
      :env-spec (emacs-home* "private/self-env-spec.el")
      :prologue (comment (emacs-home* "private/self-prologue.el"))
      :package-spec (comment (emacs-home* "private/self-package-spec.el"))
      :epilogue (comment (emacs-home* "private/self-epilogue.el")))
      
#+END_SRC

#+REVEAL: split
#+ATTR_HTML: :style text-align:left
Directories with =.= /prefix/ are for the modules that need store
configuration or cached files.

#+BEGIN_EXAMPLE
    (emacs-home*)
    ├── .backup
    ├── .bookmarks
    ├── .desktop
    ├── .dired
    ├── .eshell
    ├── .exec (comment "executable")
    ├── .games
    ├── .ido
    ├── .image-dired
    ├── .mail
    ├── .minibuffer
    ├── .places
    ├── .recentf
    ├── .save
    ├── .semantic
    ├── .semanticdb
    ├── .server
    ├── .tags
    ├── .tramp
    └── .url

#+END_EXAMPLE

*** Naming

#+REVAL: split
#+ATTR_HTML: :style text-align:left
Introduce rules of naming /files/ and /functions/.

#+REVEAL: split
**** Core Files Naming: single word and simple name.

#+BEGIN_EXAMPLE
    (emacs-home* "config/")
    ├── autoloads.el
    ├── basic.el
    ├── boot.el
    ├── dicts.el
    ├── financial.el
    ├── fns.el
    ├── gambit.el
    ├── go.el
    ├── graphic.el
    ├── gud-cdb.el
    ├── gud-lldb.el
    ├── guds.el
    ├── memory.el
    └── module.el
#+END_EXAMPLE

#+REVEAL: split
**** Extension Naming

#+REVEAL: split
- /extension/ for Emacs builtin packages: =<package-name>s.el=
#+BEGIN_EXAMPLE
    (emacs-home* "config/")
    ├── shells.el
    ├── sockets.el
    └── tags.el
#+END_EXAMPLE

#+REVEAL: split
- /autoload extension/ for Emacs builtin packages:
  =on-<package-name>-autoload.el=
#+BEGIN_EXAMPLE
    (emacs-home* "config/")
    ├── on-cc-autoload.el
    ├── on-compile-autoload.el
    ├── on-dired-autoload.el
    ├── on-docview-autoload.el
    ├── on-edit-autoload.el
    ├── on-enc-autoload.el
    ├── on-eshell-autoload.el
    ├── on-eww-autoload.el
    ├── on-font-autoload.el
    ├── on-hippie-autoload.el
    ├── on-indent-autoload.el
    ├── on-lisp-autoload.el
    ├── on-module.el
    ├── on-net-autoload.el
    ├── on-org-autoload.el
    ├── on-pp-autoload.el
    ├── on-python-autoload.el
    ├── on-semantic-autoload.el
    ├── on-term-autoload.el
    ├── on-tramp-autoload.el
    └── on-window-autoload.el
#+END_EXAMPLE

#+REVEAL: split
- /extension/ for /non/ Emacs builtin packages:
  =use-<package-name>-autoload.el=
#+BEGIN_EXAMPLE
    (emacs-home* "config/")
    ├── use-cider-autoload.el
    ├── use-cider.el
    ├── use-inf-clojure.el
    ├── use-js-autoload.el
    ├── use-lua-autoload.el
    ├── use-magit-autoload.el
    └── use-slime-autoload.el
#+END_EXAMPLE

#+REVEAL: split
**** Sample Files Naming: =sample-self-*.el=

#+BEGIN_EXAMPLE
    (emacs-home* "config/")
    ├── sample-self-env-spec.el
    ├── sample-self-epilogue.el
    ├── sample-self-package-spec.el
    ├── sample-self-path.el
    └── sample-self-prologue.el
#+END_EXAMPLE

#+REVEAL: split
**** Functions Naming

#+REVEAL: split
- *v-* prefix: functions or macros for versioned directories, such as
  =(v-home*)=
- *_* prefix: functions or macros only existing in compile-time, such
  as =_mark-thing@=
- /*/ or /**/ suffix: extensions of Emacs' builtin function or macro,
  such as =(every*)= and =assoc**=
- *%* suffix: macro be expanded at compile time, such as =(v-home%)=
- *!* suffix: function or macro may change environment state, such as
  =(v-home!)=
- *@* suffix: position related functions or macros, such as
  =mark-symbol@=
- *_..._* prefix and suffix: compile-time functions or macros, such as
  =_mark_thing@_=

* Cooking
   :PROPERTIES:
   :CUSTOM_ID: cooking
   :END:

#+ATTR_HTML: :style display:none
- [[#theme][Theme]]
- [[#font][Font]]
- [[#cooking-shell][Shell]]
- [[#session][Session]]
- [[#network][Network]]
- [[#package][Package]]
- [[#indent][Indent]]
- [[#file][File]]
- [[#editing][Editing]]
- [[#keys][Keys]]

** Theme
    :PROPERTIES:
    :CUSTOM_ID: theme
    :END:

#+ATTR_HTML: :style text-align:left
Easy to switch themes, or try a new one.

#+ATTR_HTML: :style text-align:left
The theme's spec locate in =(emacs-home* "private/self-env-spec.el")=
by default.

#+REVEAL: split
#+BEGIN_SRC emacs-lisp
(def-self-env-spec
  :theme (list :name 'dracula
               :custom-theme-directory (emacs-home* "theme/")
               :compile nil
               :allowed t))
#+END_SRC

#+REVEAL: split
- =:name= name of theme, does not need /-theme.el/ suffix
- =:custom-theme-directory= where custom theme files located
- =:compile= =t= compile theme, compiled theme more smooth and more faster
	if you had already confirmed the theme is secure.
- =:allowed= =t= enabled, =nil= disabled

#+REVEAL: split
#+ATTR_HTML: :style text-align:left
Using Emacs's builtin themes /tango-dark/ :

#+BEGIN_SRC emacs-lisp
(def-self-env-spec
  :theme (list :name 'tango-dark ;; builtin theme
               :custom-theme-directory nil
               :compile nil
               :allowed t))
#+END_SRC

#+ATTR_HTML: :style display:none
/screenshots/:
#+ATTR_HTML: :style display:none
- [[https://raw.githubusercontent.com/junjiemars/images/master/.emacs.d/default-theme-on-windows.png][default theme]]
- [[https://raw.githubusercontent.com/junjiemars/images/master/.emacs.d/dracula-theme-on-windows.png][dracula theme]]
- [[https://raw.githubusercontent.com/junjiemars/images/master/.emacs.d/tango-dark-theme-on-windows.png][tango-dark theme]]

** Font
    :PROPERTIES:
    :CUSTOM_ID: font
    :END:

#+ATTR_HTML: :style text-align:left
Easy to swtich fonts and glyph character such as [[https://en.wikipedia.org/wiki/CJK_characters][CJK]], or try a new
one. The default encoding is [[https://en.wikipedia.org/wiki/UTF-8][UTF-8]].

#+ATTR_HTML: :style text-align:left
The font's spec locate in =(emacs-home* "private/self-env-spec.el")=
by default and for GUI mode only.

#+REVEAL: split
#+BEGIN_SRC emacs-lisp
(def-self-env-spec
  :font (list :name (if-platform% 'darwin
                        "Monaco"
                      (if-platform% 'windows-nt
                          "Consolas"
                        "DejaVu Sans Mono"))
							:size 13
              :allowed t))
#+END_SRC

- =:name= string of font name
- =:size= integer of font size
- =:allowed= =t= enabled, =nil= disabled

#+REVEAL: split
#+BEGIN_SRC emacs-lisp
(def-self-env-spec
  :glyph-font (list `(:name ,(if-platform% 'darwin
                                 "Hack"
                               (if-platform% 'gnu/linux
                                   "DejaVu Sans Mono"
                                 "Courier New"))
                            :size 17
                            :scale nil
                            :scripts (greek)
                            :allowed nil)
                    `(:name ,(if-platform% 'darwin
                                 "PingFang"
                               (if-platform% 'gnu/linux
                                   "Noto Sans"
                                 "Microsoft YaHei"))
                            :size 12
                            :scale nil
                            :scripts (han)
                            :allowed nil)))
#+END_SRC
- =:name= string of font name
- =:size= integer of font size
- =:scale= number of scale ratio of glyph font, =nil= disabled
- =:scripts= list of script symbol for character
- =:allowed= =t= enabled, =nil= disabled

#+ATTR_HTML: :style display:none
/screenshots/:
#+ATTR_HTML: :style display:none
- [[https://raw.githubusercontent.com/junjiemars/images/master/.emacs.d/cjk-font-on-darwin.png][glyph font: CJK]]
- [[https://raw.githubusercontent.com/junjiemars/images/master/.emacs.d/monaco-font-on-darwin.png][Monaco font]]
- [[https://raw.githubusercontent.com/junjiemars/images/master/.emacs.d/consolas-font-on-windows.png][Consolas font]]

** Shell
    :PROPERTIES:
    :CUSTOM_ID: cooking-shell
    :END:

*** shell

#+ATTR_HTML: :style text-align:left
Suppport any =SHELL=, copying or spinning environment variables into Emacs
environment.

#+ATTR_HTML: :style text-align:left
[[https://github.com/purcell/exec-path-from-shell][exec-path-from-shell]] has a poor implementation for the same
functionalities, it is unstable and slow. But here, We had a better
one.

#+ATTR_HTML: :style text-align:left
The shell spec locate in =(emacs-home* "private/self-env-spec.el")= by
default.

#+REVEAL: split
#+BEGIN_SRC emacs-lisp
:shell (list :copy-vars `("PATH"
                         ,(unless-platform% 'windows-nt
                            (if-platform% 'darwin
                                "DYLD_LIBRARY_PATH"
                              "LD_LIBRARY_PATH")))
             :spin-vars nil ;; `(("ZZZ" . "xxxyyy"))
             :options '("-i" "2>/dev/null") ;; '("--login") ;;
             :exec-path t
             :shell-file-name (eval-when-compile (executable-find "bash"))
             :shell-prompt (list :zsh "%n@%m:%~ %# "
                                 :bash "\\u@\\h:\\w\\$ ")
             :allowed nil)
#+END_SRC

#+REVEAL: split
- =:copy-vars= copy environment variables from shell to Emacs, affects
  =eshell=, =shell= and =ansi-term=
- =:spin-vars= spin customized variables, only affects =eshell=
- =:options= a list of shell's options
- =:exec-path= copy =$PATH= or =%PATH%= to =exec-path=
- =:shell-file-name= where the shell program located, it should be
  specified when =:copy-vars= is non nil
- =:prompt= unify shell prompt in =term= mode, via @@html:<kbd>@@C-c
  j@@html:</kbd>@@ then @@html:<kbd>C-c t p@@html:</kbd>@@
- =:allowed= =t= allowed, =nil= disabled

*** eshell
    :PROPERTIES:
    :CUSTOM_ID: eshell
    :END:

#+ATTR_HTML: :style text-align:left
The eshell spec locate in =(emacs-home* "private/self-env-spec.el")=
by default. And shared the copied environment variables =:copy-vars=
with shell.

#+REVEAL: splitV
#+BEGIN_SRC emacs-lisp
(def-self-env-spec
  :eshell (list :visual-commands '("mtr")
                :destroy-buffer-when-process-dies t
                :visual-subcommands '(("git" "log"))
                :visual-options nil
                :allowed t))
#+END_SRC

#+REVEAL: split
- =:visual-commands= @@html:<kbd>@@C-h-v eshell-visual-commands@@html:</kbd>@@
- =:destroy-buffer-when-process-dies= @@html:<kbd>@@C-h-v eshell-destroy-buffer-when-process-dies@@html:</kbd>@@
- =:visual-subcommands= @@html:<kbd>@@C-h-v eshell-visual-subcommands@@html:</kbd>@@
- =:visual-options= @@html:<kbd>@@C-h-v eshell-visual-options@@html:</kbd>@@
- =:allowed= =t= allowed, =nil= disabled

** Session
    :PROPERTIES:
    :CUSTOM_ID: session
    :END:

#+ATTR_HTML: :style text-align:left
The desktop spec locate in =(emacs-home* "private/self-env-spec.el")=
by default.

#+REVEAL: split
#+BEGIN_SRC emacs-lisp
    (def-self-env-spec
      :desktop (list :files-not-to-save
                     ".*\.t?gz\\|\.desktop\\|~$\\|\\/ssh[: ]\\|\.elc$"
                     :buffers-not-to-save "^TAGS\\|\\.log"
                     :modes-not-to-save
                     '(dired-mode fundamental-mode rmail-mode)
                     :restore-eager 8
                     :allowed t))
#+END_SRC

#+REVEAL: split
- =:files-not-to-save= @@html:<kbd>@@C-h-v desktop-files-not-to-save@@html:</kbd>@@
- =:buffers-not-to-save= @@html:<kbd>@@C-h-v desktop-buffers-not-to-save@@html:</kbd>@@
- =:modes-not-to-save= @@html:<kbd>@@C-h-v desktop-modes-not-to-save@@html:</kbd>@@
- =:restore-eager= @@html:<kbd>@@C-h-v desktop-restore-eager@@html:</kbd>@@
- =:allowed= =t= enabled, =nil= disabled

** Network
    :PROPERTIES:
    :CUSTOM_ID: network
    :END:

*** Socks

#+ATTR_HTML: :style text-align:left
Using socks proxy when installing packages or browsing web pages.

#+ATTR_HTML: :style text-align:left
The socks spec locate in =(emacs-home* "private/self-env-spec.el")= by
default.

#+REVEAL: split
#+BEGIN_SRC emacs-lisp
(def-self-env-spec
  :socks (list :port 32000
               :server "127.0.0.1"
               :version 5
               :allowed nil))
#+END_SRC

#+REVEAL: split
- =:port= the port of socks proxy server
- =:server= the address of socks proxy server
- =:version= socks version
- =:allowed= =t= enabled, =nil= disabled

#+ATTR_HTML: :style text-align:left
If =:allowed t=, =url-gateway-method= should be switch to =socks= when
Emacs initializing. After Emacs initialization, you can =toggle-socks!=
and no matter =:allowed= is =t= or =nil=.

*** Network Utils

#+ATTR_HTML: :style text-align:left
Emacs comes with a lots of wrappers(=net-utils.el=) around the common
network utilities. Such as @@html:<kbd>@@M-x ping@@html:</kdb>@@ a
host.  But =net-utils.el= has some inconveniences:

#+REVEAL: split
- If you want to =ping= with options you must set
=ping-program-options= customizable variable.
- IPv6 supporting: on Unix-like OS there are individual program for
  IPv6, such as =ping6=, but on Windows OS just one =ping= program and
  with =-6= option.

#+ATTR_HTML: :style text-align:left I'd refined common interative
commands around =net-utils=, and named those commands with =*= prefix.
Using @@html:<kbd>@@C-u M-x *<command>@@html:</kdb>@@ you can set the
options for that <command>.

#+REVEAL: split
#+ATTR_HTML: :style text-align:left
The following interactive commands had been defined for Emacs22.1+
whatever OS you using:
- @@html:<kbd>@@M-x *arp@@html:</kdb>@@
- @@html:<kbd>@@M-x *dig@@html:</kbd>@@
- @@html:<kbd>@@M-x *ifconfig@@html:</kbd>@@
- @@html:<kbd>@@M-x *ping@@html:</kbd>@@
- @@html:<kbd>@@M-x *traceroute@@html:</kbd>@@

*** Browser

- Using @@html:<kbd>@@M-x toggle-browser!@@html:</kdb>@@ to switch
  external or internal browser.
- Lookup online for symbol, word, etc.,: @@html:<kdb>@@M-s
  u@@html:</kdb>@@
- Lookup online dictionaries: @@html:<kbd>@@M-s d@@html:</kbd>@@

** Package
    :PROPERTIES:
    :CUSTOM_ID: package
    :END:

#+ATTR_HTML: :style text-align:left
Don't tell me [[https://github.com/jwiegley/use-package][use-package]], it's trying to redefine Emacs. Here you can
find more simpler and faster way to implement almost functionalities
that =use-pacakge= does.

#+ATTR_HTML: :style text-align:left
There are two types of packages: /basic/ (just like Emacs' builtin)
and /user defined/. To disable /user defined/ packages in
=(def-self-path-ref)=, to disable both /basic/ and /user defined/
packages can be done in =(def-self-env-spec)=.

#+REVEAL: split
#+BEGIN_SRC emacs-lisp
(def-self-env-spec
  :package (list :remove-unused nil
                 :package-check-signature 'allow-unsigned
                 :allowed nil))
#+END_SRC

#+ATTR_HTML: :style text-align:left
The /user defined/ package spec default locate in =(emacs-home*
"private/self-package-spec.el")= by default.

#+REVEAL: split
#+BEGIN_SRC emacs-lisp
(def-self-package-spec
  (list
   :cond t
   :packages '(markdown-mode htmlize ox-reveal)
   :compile `(,(compile-unit% (emacs-home* "config/use-org-autoload.el"))))
  (list
   :cond (executable-find% "latex")
   :packages '(auctex cdlatex))
  (list
   :cond (and (when-version% <= 24.4 t)
              (executable-find% "docker"))
   :packages '(dockerfile-mode
               docker-tramp))
  (list
   :cond (or (executable-find% "sbcl"))
   :packages '(slime)
   :compile `(,(compile-unit% (emacs-home* "config/use-slime.el") t)
              ,(compile-unit% (emacs-home* "config/use-slime-autoload.el")))))
#+END_SRC

#+REVEAL: split
- =:cond= decide whether to install =:packages= or compile =:compile=
- =:packages= a list of package names or tar file names
- =:compile= when installed packages, a list of files that should be
  compiled only or be loaded after been compiled

#+REVEAL: split
#+ATTR_HTML: :style text-align:left
You can use any =Elisp= functions after the aboved keywords.
- =when-version%= macro checking the version of current Emacs at
  compile time
- =executable-find%= macro checking the exising of the /executable/ at
  compile time
- =compile-unit%= macro specify the compiling file to compile or
  compile then load

** Indent
    :PROPERTIES:
    :CUSTOM_ID: indent
    :END:

#+ATTR_HTML: :style text-align:left
Avoiding a war. If /whitespace/ causes some trouble, you can swith to
@@html:<kbd>@@M-x whitespace-mode@@html:</kbd>@@ to find out.

#+REVEAL: split
#+BEGIN_SRC emacs-lisp
(def-self-env-spec
  :edit (list :tab-width 2
              :auto-save-default nil
              :disable-indent-tabs-mode '(c-mode-common-hook
                                          sh-mode-hook
                                          emacs-lisp-mode-hook)
              :narrow-to-region nil
              :allowed t))
#+END_SRC

- =:tab-width= default @@html:<kbd>@@C-h-v tab-width@@html:</kbd>@@
- =:auto-save-default= @@html:<kbd>@@C-h-v auto-save-default@@html:</kbd>@@
- =:disable-indent-tabs-mode= disble =indent-tabs-mode= in specified
  major modes
- =:narrow-to-region= =t= enabled, =nil= disabled
- =:allowed= =t= enabled, =nil= disabled

** File
    :PROPERTIES:
    :CUSTOM_ID: file
    :END:

#+ATTR_HTML: :style text-align:left
Using =dired= as a File Manager is awesome, same experiences on
Windows, Darwin and Linux.

*** ls Program

#+ATTR_HTML: :style text-align:left
For Windows, there are no built-in =ls= program, but you can install
GNU's =ls= via [[https://git-scm.com/downloads][Git-Bash]].

#+ATTR_HTML: :style text-align:left
For Darwin, let =dired= don't do stupid things.

#+ATTR_HTML: :style display:none
/screenshots/:
#+ATTR_HTML: :style display:none
- [[https://raw.githubusercontent.com/junjiemars/images/master/.emacs.d/ido-dired-windows-gnu-ls.png][ido-dired]]

*** find Program

#+ATTR_HTML: :style text-align:left
On Windows, if GNU's =find= has already in your disk, and let Windows
stupid =find= or =findstr= program go away.  Don't =setq=
=find-program= on Windows, because =dired= can not differ the cases
between local and remote.

#+ATTR_HTML: :style text-align:left
Now, on Windows you can use @@html:<kbd>@@M-x find-dired@@html:</kbd>@@
or @@html:<kbd>@@M-x find-name-dired@@html:</kbd>@@

#+ATTR_HTML: :style display:none
/screenshots/:
#+ATTR_HTML: :style display:none
- [[https://raw.githubusercontent.com/junjiemars/images/master/.emacs.d/find-name-dired-on-windows.png][find-name-dired]]
- [[https://raw.githubusercontent.com/junjiemars/images/master/.emacs.d/find-name-dired-tramp-on-windows.png][find-name-dired via tramp]]

*** compress Program

#+ATTR_HTML: :style text-align:left
On Windows, there are no builtin =zip/unzip= program, but Emacs ship
with =minizip= program.  Although =minizip= without /recursive/
functionalities, but do some tricks with =minizip=, we can zip files
and directories with =minizip=, even export =org= to =odt=
[[https://en.wikipedia.org/wiki/OpenDocument][OpenDocument]]. And more [[https://www.7-zip.org/download.html][7-Zip standalone command version also be
supported]].

#+REVEAL: split
#+ATTR_HTML: :style text-align:left
On Windows, there are logical bugs in =dired-aux.el=, We can not using
=Z= key compress or uncompress file to or from =.gz= or =.7z=. The
good news: if =gunzip= or =7za= installed we can do it now.

#+ATTR_HTML: :style text-align:left
You can using @@html:<kbd>c@@html:</kbd>@@ in =dired mode= compress to
=*.gz=, =*.7z= or =*.zip=. For some ancient Emacs24-, @@html:<kbd>@@!
zip x.zip ?@@html:</kbd>@@ to zip.

#+REVEAL: split
#+ATTR_HTML: :style text-align:left
It's headache when =default-file-name-coding-system= not equal with
=locale-coding-system= specifically on Windows. Even view archived
file in =arc-mode=, will display wrong encoded file names.

#+REVEAL: split
#+ATTR_HTML: :style text-align:left
On Windows, there are some encoding issues when
~default-file-name-coding-system~ not equal ~locale-coding-system~.
- display non-unicode encoded directory name or file name;
- insert non-unicode encoded directory;
- compress the files with with ~locale-coding-system~ filenames;
- ~dired-do-shell-command~ or ~dired-do-async-shell-command~;

#+REVEAL: split
#+ATTR_HTML: :style text-align:left
The good news is all those issues had gone in this kit.

#+ATTR_HTML: :style text-align:left
For =.rar= archive, emacs really sucks. 
- on Emacs 23.3.1, using =unrar-free= in =archive-rar-summarize=
  function, but on Emacs 26.1 using =lsar=, and those all had been
  hard coded in =arc-mode.el=.
- =7z l= output is not compatible with =lsar= and =unrar=.


#+ATTR_HTML: :style display:none
/screenshots/:
#+ATTR_HTML: :style display:none
- [[https://raw.githubusercontent.com/junjiemars/images/master/.emacs.d/dired-do-compress-to-zip-on-windows.png][dired-do-compress-to: zip]]
- [[https://raw.githubusercontent.com/junjiemars/images/master/.emacs.d/dired-do-compress-to-7z-on-windows.png][dired-do-compress-to: 7z]]
- [[https://raw.githubusercontent.com/junjiemars/images/master/.emacs.d/archive-summarize-files-zip-on-windows.png][archive-summarize-files: zip]]
- [[https://raw.githubusercontent.com/junjiemars/images/master/.emacs.d/archive-summarize-files-7z-on-windows.png][archive-summarize-files: 7z]]
- [[https://raw.githubusercontent.com/junjiemars/images/master/.emacs.d/org-odt-export-to-odt-on-windows.png][org-odt-export-to-odt]]
- [[https://raw.githubusercontent.com/junjiemars/images/master/.emacs.d/dired-compress-file-suffixes-version-24lt.png][dired-compress-file-suffixes]]

** Editing
	 :PROPERTIES:
	 :CUSTOM_ID: editing
	 :END:

*** Mark
	 :PROPERTIES:
	 :CUSTOM_ID: edit-mark
	 :END:

#+ATTR_HTML: :style text-align:left	 
Provides the abilities to mark /symbol/, /filename/ and /line/ in
current buffer then you can @@html:<kbd>@@M-w@@html:</kbd>@@ the
marked part.

#+ATTR_HTML: :style text-align:left
Using =mark-list@= to mark Lisp /sexp/ or C /block/. And using
=mark-defun@= to mark whole function definition. You can do those
things for other major modes not only Elisp.

- @@html:<kbd>@@C-c m s@@html:</kbd>@@ [[https://raw.githubusercontent.com/junjiemars/images/master/.emacs.d/mark-symbol.png][mark symbol at point]]
- @@html:<kbd>@@C-c m f@@html:</kbd>@@ [[https://raw.githubusercontent.com/junjiemars/images/master/.emacs.d/mark-filename.png][mark filename at point]]
- @@html:<kbd>@@C-c m w@@html:</kbd>@@ [[https://raw.githubusercontent.com/junjiemars/images/master/.emacs.d/mark-word.png][mark word at point]]
- @@html:<kbd>@@C-c m l@@html:</kbd>@@ [[https://raw.githubusercontent.com/junjiemars/images/master/.emacs.d/mark-line.png][mark line at point]]
- @@html:<kbd>@@C-c m a@@html:</kbd>@@ [[https://raw.githubusercontent.com/junjiemars/images/master/.emacs.d/mark-list.png][mark list at point]]
- @@html:<kbd>@@C-c m d@@html:</kbd>@@ [[https://raw.githubusercontent.com/junjiemars/images/master/.emacs.d/mark-defun.png][mark defun at point]]

*** Tags
	 :PROPERTIES:
	 :CUSTOM_ID: edit-tags
	 :END:

#+ATTR_HTML: :style text-align:left
Prefer =etags= program, because it works well on varied platforms. In
=(emacs-home* "config/tags.el")=, there are some handy functions to
create the tags for =Elisp= or =C= source code, such as
=make-emacs-source-tags=, =make-system-c-tags=, =mount-tags=, and
=unmount-tags=.

#+REVEAL: split
Using =mount-tags= to mount the specified tags file at first order of
=tags-table-list=. Or @@html:<kbd>@@C-u mount-tags@@html:</kbd>@@ to
mount tags file at the tail of =tags-table-list=.  The =unmount-tags=
is the inverse of =mount-tags=.

#+ATTR_HTML: :style text-align:left
More Reasonable Emacs also supports [[http://ctags.sourceforge.net/][Exuberant Ctags]].

*** Clipboard
	 :PROPERTIES:
	 :CUSTOM_ID: edit-clipboard
	 :END:

#+ATTR_HTML: :style text-align:left
In terminal, Emacs can not /copy to/ or /paste from/ system clipboard
when on Darwin or Linux. For such cases, we need external programs to
help us do the job. Now, More Reasonable Emacs integrates this
functionalities, so we can use natural keys (such as
@@html:<kbd>@@C-w@@html:</kbd>@@, @@html:<kbd>@@C-y@@html:</kbd>@@) to
/copy to/ or /paste from/ system clipboard.

*** iSearch
	 :PROPERTIES:
	 :CUSTOM_ID: edit-isearch
	 :END:

#+ATTR_HTML: :style text-align:left
There are no uniformed [[https://www.emacswiki.org/emacs/IncrementalSearch][isearch]] functionalites among in
=isearch-forward=, =isearch-forward-symbol-at-point= and
=isearch-backward=. Now, in More Reasonable Emacs those functionalites
unified to two functions: =isearch-forward*= and =isearch-backward*=.

#+REVEAL: split
#+ATTR_HTML: :style text-align:left
In More Reasonable Emacs, by default, =isearch-forward*= and
 =isearch-backward*= same with the built-in ones. Except we can search
 the text of activated *region*.  @@html:<kbd>@@C-s@@html:</kbd>@@ and
 @@html:<kbd>@@C-r@@html:</kbd>@@ will search forward or backward just
 like /vi/'s @@html:<kbd>@@*@@html:</kbd>@@ and
 @@html:<kbd>@@C-u s@@html:</kbd>@@ does advanced searching.

And more, searching =word=, =quoted string=, or =filename= forward or
 backword.
 
*** Open line
	 :PROPERTIES:
	 :CUSTOM_ID: edit-open-line
	 :END:

#+ATTR_HTML: :style text-align:left
Emulates /vi/'s *o* and *O* command in Emacs, the built-in one
=open-line= or =split-line= do not indent accordingly the current
line. See [[https://www.emacswiki.org/emacs/OpenNextLine][Open Next Line]].

#+REVEAL: split
- @@html:<kbd>@@C-o@@html:</kbd>@@ =open-next-line=
- @@html:<kbd>@@C-M-o@@html:</kbd>@@ =open-previous-line=

** Keys
	 :PROPERTIES:
	 :CUSTOM_ID: keys
	 :END:

#+ATTR_HTML: :style text-align:left
Obey the defaults of Emacs' keymap.

*** Global keys

#+ATTR_HTML: :style text-align:left
Global for all Emacs' version.

- @@html:<kbd>@@M-/@@html:</kbd>@@ =hippie-expand=
- @@html:<kbd>@@C-c ;@@html:</kbd>@@ =toggle-comment=
- @@html:<kbd>@@C-c f f@@html:</kbd>@@ =find-file-at-point=
- @@html:<kbd>@@C-c b r@@html:</kbd>@@ =revert-buffer=
- @@html:<kbd>@@C-c b n@@html:</kbd>@@ =echo-buffer-file-name=
- @@html:<kbd>@@C-o@@html:</kbd>@@ =open-next-line=
- @@html:<kbd>@@C-M-o@@html:</kbd>@@ =open-previous-line=	
- @@html:<kbd>@@C-c m s@@html:</kbd>@@: =mark-symbol@=
- @@html:<kbd>@@C-c m l@@html:</kbd>@@: =mark-line@=
- @@html:<kbd>@@C-c m f@@html:</kbd>@@: =mark-filename@=
- @@html:<kbd>@@C-c m d@@html:</kbd>@@: =mark-defun@=
#+REVEAL: split
- @@html:<kbd>@@C-s@@html:</kbd>@@: =isearch-forward*=
- @@html:<kbd>@@C-r@@html:</kbd>@@: =isearch-backward*=
- @@html:<kbd>@@M-s s@@html:</kbd>@@: =isearch-forward-symbol-at-point=
- @@html:<kbd>@@M-s w@@html:</kbd>@@: =isearch-forward-word*=
- @@html:<kbd>@@M-s q@@html:</kbd>@@: =isearch-forward-string*=
- @@html:<kbd>@@M-s f@@html:</kbd>@@: =isearch-forward-filename*=

*** Compatible keys

#+ATTR_HTML: :style text-align:left
Compatibled for ancient Emacs versions, compatible keys may not
avaiabled on ancient Emacs.
		
- @@html:<kbd>@@M-,@@html:</kbd>@@ =pop-tag-mark=
- @@html:<kbd>@@M-*@@html:</kbd>@@ =tags-loop-continue=
- @@html:<kbd>@@C-l@@html:</kbd>@@ =recenter-top-bottom=
- @@html:<kbd>@@C-c b l@@html:</kbd>@@ =linum-mode=
- @@html:<kbd>@@M-#@@html:</kbd>@@ =xref-find-references=

*** Featured keys

#+ATTR_HTML: :style text-align:left
The features provided by 3rd packages, featured keys may not avaiabled
on ancient Emacs.

- @@html:<kbd>@@C-x v M@@html:</kbd>@@ =magit-status=

* Programming
	:PROPERTIES:
	:CUSTOM_ID: programming
	:END:

** Generic editing
	 :PROPERTIES:
	 :CUSTOM_ID: general-editing
	 :END:

#+ATTR_HTML: :style text-align:left
Just introduces More Resonable Emacs improved or extra editing
features.

** Lisp programming
	 :PROPERTIES:
	 :CUSTOM_ID: lisp-programming
	 :END:

#+ATTR_HTML: :style text-align:left
Lisp programming in Emacs already good enough, if [[https://www.emacswiki.org/emacs/ParEdit][ParEdit]] and
[[https://github.com/Malabarba/aggressive-indent-mode][aggressive-indent-mode]] installed editing Lisp code more easy.

#+ATTR_HTML: :style text-align:left
[[https://github.com/slime/slime][slime]] is the best tool for Common Lisp programming. And for Scheme
programming the [[http://www.nongnu.org/geiser/][Geiser]] the pretty good.

*** Editing

*** REPL

** C programming
	 :PROPERTIES:
	 :CUSTOM_ID: c-programming
	 :END:

#+ATTR_HTML: :style text-align:left
Now, we are in the cycle of editing, compiling, debugging.

#+ATTR_HTML: :style display:none
/screenshots/:
#+ATTR_HTML: :style display:none
- [[https://raw.githubusercontent.com/junjiemars/images/master/.emacs.d/c-programming-editing-on-darwin-gui.png][editing on Darwin]]
- [[https://raw.githubusercontent.com/junjiemars/images/master/.emacs.d/c-programming-debugging-via-lldb-on-darwin.png][debugging via lldb on Darwin]]
- [[https://raw.githubusercontent.com/junjiemars/images/master/.emacs.d/c-programming-debugging-via-lldb-on-linux.png][debugging via lldb on Ubuntu]]	
- [[https://raw.githubusercontent.com/junjiemars/images/master/.emacs.d/c-programming-debugging-via-cdb-on-windows.png][debugging via cdb]]

*** Editing
		:PROPERTIES:
		:CUSTOM_ID: c-programming-editing
		:END:

Change C programming style using  @@html:<kbd>@@C-c .@@html:</kbd>@@.

**** View C system include
		 :PROPERTIES:
		 :CUSTOM_ID: c-programming-view-c-system-include
		 :END:

#+ATTR_HTML: :style text-align:left
Like /vi/'s @@html:<kbd>@@gf@@html:</kbd>@@ command, you can using
@@html:<kbd>@@C-c f i@@html:</kbd>@@ to open C system include file on
local or remote in =view-mode= and supports /gcc/, /clang/, and
/msvc/.

**** Macro expand
		 :PROPERTIES:
		 :CUSTOM_ID: c-programming-macro-expand
		 :END:

#+ATTR_HTML: :style text-align:left
Mark the code that include a macro call then @@html:<kbd>@@C-c
C-e@@html:</kbd>@@, you should see the expansion of the macro in
=*Macroexpansion*=, whatever you are using /gcc/, /clang/ and /msvc/,
locally or remotely.

#+ATTR_HTML: :style display:none
/screenshots/:
#+ATTR_HTML: :style display:none
- [[https://raw.githubusercontent.com/junjiemars/images/master/.emacs.d/c-programming-macro-expansion-on-windows.png][macro expansion for msvc]]

**** Dump predefined macros
		 :PROPERTIES:
		 :CUSTOM_ID: c-programming-dump-predefined-macros
		 :END:

#+ATTR_HTML: :style text-align:left
Dump compiler predefined macros, @@html:<kbd>@@C-c #@@html:</kbd>@@,
you should see the predefined macros in =*Predefined Macros*=,
whatever you are using /gcc/ and /clang/ locally or remotely.

#+ATTR_HTML: :style display:none
/screenshots/:
#+ATTR_HTML: :style display:none
- [[https://raw.githubusercontent.com/junjiemars/images/master/.emacs.d/c-programming-dump-predefined-macros.png][dump predefined macros for clang]]

*** Compiling
		:PROPERTIES:
		:CUSTOM_ID: c-programming-compiling
		:END:

#+ATTR_HTML: :style text-align:left
Using @@html:<kbd>@@M-x compile@@html:</kbd>@@ to /build/ or /test/.

#+ATTR_HTML: :style text-align:left
For /msvc/ there are need tricks to works with Emacs, More Resonable
Emacs will generate a /msvc/'s host environment =cc-env.bat= for you
that make life easy and if [[https://github.com/junjiemars/nore][Nore]] already on your machine, now life is
perfect.

#+ATTR_HTML: :style display:none
/screenshots/:
#+ATTR_HTML: :style display:none
- [[https://raw.githubusercontent.com/junjiemars/images/master/.emacs.d/c-programming-compile-on-windows.png][compile via msvc]]

*** Debugging
		:PROPERTIES:
		:CUSTOM_ID: c-programming-debugging
		:END:

#+ATTR_HTML: :style text-align:left
[[https://www.gnu.org/software/gdb/][gdb]], [[https://lldb.llvm.org/][lldb]] and [[https://docs.microsoft.com/en-us/windows-hardware/drivers/debugger/][cdb]] had been perfect integrated within this kit.

#+ATTR_HTML: :style display:none
/screenshots/:
#+ATTR_HTML: :style display:none
- [[https://raw.githubusercontent.com/junjiemars/images/master/.emacs.d/c-programming-debugging-via-lldb-on-darwin.png][debugging via lldb on Darwin]]
- [[https://raw.githubusercontent.com/junjiemars/images/master/.emacs.d/c-programming-debugging-via-lldb-on-linux.png][debugging via lldb on Ubuntu]]	
- [[https://raw.githubusercontent.com/junjiemars/images/master/.emacs.d/c-programming-debugging-via-cdb-on-windows.png][debugging via cdb]]

* Improved
	:PROPERTIES:
	:CUSTOM_ID: improved
	:END:

** Dictionary
	:PROPERTIES:
	:CUSTOM_ID: improved-dictionary
	:END:

Lookup online dictionary @@html:<kbd>@@C-c f d@@html:</kdb>@@: bing,
cambridge, longman, etc.

** Dired
	:PROPERTIES:
	:CUSTOM_ID: improved-dired
	:END:

* Troubleshoting
   :PROPERTIES:
   :CUSTOM_ID: troubleshoting
   :END:

1. @@html:<kbd>@@M-x (clean-compiled-files)@@html:</kbd>@@ then exit
   and reopen Emacs.
2. Check Emacs configurations: 
  - @@html:<kbd>@@M: system-configuration-options@@html:</kbd>@@
  - @@html:<kbd>@@M: system-configuration-features@@html:</kbd>@@
  - @@html:<kbd>@@M: features@@html:</kbd>@@
	- @@html:<kbd>@@M: load-history@@html:</kbd>@@
	then do #1
3. Check =*Compilation-Log*= buffer, then do #1
4. Disable the problematic item in =(emacs-home*
   "private/self-env-spec.el")=, then do #1
5. Disable the problematic item in =(emacs-home*
   "private/self-path.el")=, then do #1

* Mnemonic
	:PROPERTIES:
	:CUSTOM_ID: mnemonic
	:END:

#+ATTR_HTML: :style display:none
- [[#emacs-documents][Emacs Documents]]
- [[#motion][Motion]]
- [[#interaction][Interaction]]
- [[#editing][Editing]]
- [[#coding-system][Coding system]]
- [[#basic-sexp-commands][Basic sexp commands]]
- [[#frame][Frame]]
- [[#window][Window]]
- [[#register][Register]]
- [[#bookmark][Bookmark]]
- [[#rectangle][Rectangle]]
- [[#keyboard-macro][Keyboard Macro]]
- [[#dired][Dired]]
- [[#mnemonic-shell][Shell]]
- [[#remote][Remote]]
- [[#sort][Sort]]
- [[#face][Face]]
- [[#latex-requirements][LaTeX Requirements]]
- [[#log][Log]]

** Emacs Documents
   :PROPERTIES:
   :CUSTOM_ID: emacs-documents
   :END:

#+ATTR_HTML: :style text-align:left
It's *self-documenting* and great, keep reading it frequently.

- Tutorial: @@html:<kbd>@@C-h-t@@html:</kbd>@@
- Help for Help: @@html:<kbd>@@C-h C-h@@html:</kbd>@@
- Emacs manual: @@html:<kbd>@@C-h r@@html:</kbd>@@
- Apropos command: @@html:<kbd>@@C-h a@@html:</kbd>@@
- Mode: @@html:<kbd>@@C-h-m@@html:</kbd>@@ see all the key bindings and
  documentation of current buffer

#+REVEAL: split
- Info: @@html:<kbd>@@C-h i@@html:</kbd>@@
- Info /file/: @@html:<kbd>@@C-u C-h i <where>@@html:</kbd>@@
- Index of /topic/: @@html:<kbd>@@C-h r i @@html:</kbd>@@
- Info of /mode/: @@html:<kbd>@@C-h i m @@html:</kbd>@@

#+REVEAL: split
- Function: @@html:<kbd>@@C-h-f@@html:</kbd>@@ display documentation of
  the given function
- Variable: @@html:<kbd>@@C-h-v@@html:</kbd>@@ display documentation of
  the given variable
- Keybinding: @@html:<kbd>@@C-h-k@@html:</kbd>@@ display documentation
  of the function invoked by the given keystrokes
- Keybinding briefly: @@html:<kbd>@@C-h c@@html:</kbd>@@, which command
  for given keystroke

#+REVEAL: split
- Prefix keybindings: press prefix keys such as
  @@html:<kbd>@@C-c@@html:</kbd>@@ then
  @@html:<kbd>@@C-h@@html:</kbd>@@ to see all key bindings for given
  prefix keystrokes

#+REVEAL: split
- Message: @@html:<kbd>@@C-h e@@html:</kbd>@@ see the logging of echo
  area message
- Man: @@html:<kbd>@@M-x man@@html:</kbd>@@ view UNIX manual page
- Woman: @@html:<kbd>@@M-x woman@@html:</kbd>@@ view UNIX manual page
  without =man= program

#+REVEAL: split
- Coding system: @@html:<kbd>@@C-h C@@html:</kbd>@@ describe coding
  system
- Colors: @@html:<kbd>@@M-x list-colors-display@@html:</kbd>@@ display
  names of defined colors and show what they look like
- Syntax: @@html:<kbd>@@C-h s@@html:</kbd>@@ describe syntax
- Where is command: @@html:<kbd>@@C-h w@@html:</kbd>@@ which keystrokes
  binding to a given command
- Keystrokes: @@html:<kbd>@@C-h l@@html:</kbd>@@ display last 100
  input keystrokes

** Motion
   :PROPERTIES:
   :CUSTOM_ID: motion
   :END:

#+REVEAL: split
- goto line: @@html:<kbd>@@M-g g@@html:</kbd>@@
- goto nth char: @@html:<kbd>@@M-g c@@html:</kbd>@@
- goto next error: @@html:<kbd>@@C-x `@@html:</kbd>@@
- goto previous error: @@html:<kbd>@@M-g p@@html:</kbd>@@

#+REVEAL: split
- jump between buffers: @@html:<kbd>@@C-x C-SPC@@html:</kbd>@@, jumps to
  the global mark acrross buffers
- jump in buffer: @@html:<kbd>@@C-u C-SPC@@html:</kbd>@@
- jump to definition: @@html:<kbd>@@M-.@@html:</kbd>@@
- pop back to where @@html:<kbd>@@M-,@@html:</kbd>@@

** Interaction
   :PROPERTIES:
   :CUSTOM_ID: interaction
   :END:

- =*scratch*= buffer
- eval /Elisp/: @@html:<kbd>@@M-:@@html:</kbd>@@
- execute /Shell/ command: @@html:<kbd>@@M-!@@html:</kbd>@@
- in Dired mode: @@html:<kbd>@@!@@html:</kbd>@@, do shell command
- region as input to Shell command: @@html:<kbd>@@M-|@@html:</kbd>@@,

#+REEVAL: split
- insert from shell output: @@html:<kbd>@@C-u M-!@@html:</kbd>@@
- insert from elisp output: @@html:<kbd>@@C-u M-:@@html:</kbd>@@

#+REVEAL: split
- find file at point: @@html:<kbd>@@C-c f f@@html:</kbd>@@
- filename of current buffer: @@html:<kbd>@@C-c b n@@html:</kbd>@@

#+REVAL: split
- lookup /web/ at point: @@html:<kbd>@@M-s w@@html:</kbd>@@
- lookup /dict/ at point: @@html:<kbd>@@M-s d@@html:</kbd>@@

#+REVAL: split
- display time: @@html:<kbd>@@M-x display-time@@html:</kbd>@@

** Editing
   :PROPERTIES:
   :CUSTOM_ID: editing
   :END:

- write file: @@html:<kbd>@@C-x C-w@@html:</kbd>@@ same as save as
- kill all spaces at point: @@html:<kbd>@@M-\@@html:</kbd>@@
- kill all spaces except one at point: @@html:<kbd>@@M-SPC@@html:</kbd>@@
- delete indentation to join line to previous line:
  @@html:<kbd>@@M-^@@html:</kbd>@@
- join next line: @@html:<kbd>@@C-u 1 M-^@@html:</kbd>@@

#+REVAL: split
- kill word: @@html:<kbd>@@M-d@@html:</kbd>@@
- kill /whole word/: @@html:<kbd>@@C-c k w@@html:</kbd>@@, include the
  word that current point located.
- kill /whole symbol/: @@html:<kbd>@@C-c k s@@html:</kbd>@@, include
  the symbol that current point located.
- kill /line/: @@html:<kbd>@@C-k@@html:</kbd>@@
- kill /whole/ line: @@html:<kbd>@@C-S-<backspace>@@html:</kbd>@@ or
  @@html:<kbd>@@C-c k l@@html:</kbd>@@

#+REVEAL: split
- dynamic abbreviation: @@html:<kbd>@@M-/@@html:</kbd>@@
- query replace: @@html:<kbd>@@M-%@@html:</kbd>@@
- upcase region: @@html:<kbd>@@C-x C-u@@html:</kbd>@@
- downcase region: @@html:<kbd>@@C-x C-l@@html:</kbd>@@

#+REVEAL: split
- transpose characters: @@html:<kbd>@@C-t@@html:</kbd>@@
- transpose words: @@html:<kbd>@@M-t@@html:</kbd>@@
- transpose lines: @@html:<kbd>@@C-x C-t@@html:</kbd>@@

#+REVEAL: split
- insert parentheses: @@html:<kbd>@@M-(@@html:</kbd>@@, wrap selection
  in parentheses
- toggle read-only mode: @@html:<kbd>@@C-x C-q@@html:</kbd>@@
- toggle input method: @@html:<kbd>@@C-\@@html:</kbd>@@
- set input method: @@html:<kbd>@@C-x RET C-\@@html:</kbd>@@
- describe current input method: @@html:<kbd>@@C-h I@@html:</kbd>@@

#+REVEAL: split
- insert char: @@html:<kbd>@@C-x 8 RET@@html:</kbd>@@ GREEK SMALL LETTER LAMBDA
- what cursor position: @@html:<kbd>@@C-x =@@html:</kbd>@@	
- describe char: @@html:<kbd>@@C-u C-x =@@html:</kbd>@@
- quoted insert: @@html:<kbd>@@C-q@@html:</kbd>@@, such as page break
  @@html:<kbd>@@C-q C-l@@html:</kbd>@@, use @@html:<kbd>@@C-x
  [@@html:</kbd>@@ to backward or @@html:<kbd>@@C-x ]@@html:</kbd>@@
  to forward,
	@@html:<kbd>@@C-q C-I@@html:</kbd>@@ to insert horizontal tab,
	@@html:<kbd>@@C-q C-J@@html:</kbd>@@ to insert line feed,
	@@html:<kbd>@@C-q C-M@@html:</kbd>@@ to insert carriage return
- check unmatched parentheses: @@html:<kbd>@@M-x check-parens@@html:</kbd>@@

#+REVEAL: split
- tab to space: @@html:<kbd>@@M-x untabify@@html:</kbd>@@
- space to tab: @@html:<kbd>@@M-x tabify@@html:</kbd>@@
- fill paragraph: @@html:<kbd>@@M q@@html:</kbd>@@
- redo after undo: @@html:<kbd>@@C-g@@html:</kbd>@@ and then
	@@html:<kbd>@@C-x u@@html:</kbd>@@
- cancel: @@html:<kbd>@@C-]@@html:</kbd>@@, or @@html:<kbd>@@M-x
  top-level@@html:</kbd>@@

#+REVEAL: split
- open new line before current: @@html:<kbd>@@C-o@@html:</kbd>@@
- remove all but one empty line: @@html:<kbd>@@C-x C-o@@html:</kbd>@@
- delete entire line: @@html:<kbd>@@C-S-DEL@@html:</kbd>@@
- delete to end of sentence: @@html:<kbd>@@M-k@@html:</kbd>@@
- insert char: @@html:<kbd>@@C-x 8 RET@@html:</kbd>@@
- count lines, words or characters of select region:
  @@html:<kbd>@@M-=@@html:</kbd>@@
- count lines on current page: @@html:<kbd>@@C-x l@@html:</kbd>@@

** Coding system
	 :PROPERTIES:
	 :CUSTOM_ID: coding-system
	 :END:

#+REVEAL: split
- check current buffer coding system: @@html:<kbd>@@C-x RET
  =@@html:</kbd>@@
- revert current buffer's coding system: @@html:<kbd>@@C-x RET
  r@@html:</kbd>@@
- specify coding system for the current buffer: @@html:<kbd>@@C-x RET
  f@@html:</kbd>@@
#+REVEAL: split
- specify coding system for terminal output: @@html:<kbd>@@C-x RET
  t@@html:</kbd>@@
- specify coding system for keyboard input: @@html:<kbd>@@C-x RET
  k@@html:</kbd>@@
- specify coding system for the immediately following command:
  @@html:<kbd>@@C-x RET c@@html:</kbd>@@
#+REVEAL: split
- specify input and output coding systems for subprocess:
  @@html:<kbd>@@C-x RET p@@html:</kbd>@@
- specify coding system for transferring selections to and from other
  programs through the window system: @@html:<kbd>@@C-x RET
  x@@html:</kbd>@@
- specify coding system for transferring one selection to or from the
  window system: @@html:<kbd>@@C-x RET X@@html:</kbd>@@

** Basic sexp commands
   :PROPERTIES:
   :CUSTOM_ID: basic-sexp-commands
   :END:

-  =forward-sexp=: @@html:<kbd>@@C-M-f@@html:</kbd>@@
-  =backward-sexp=: @@html:<kbd>@@C-M-b@@html:</kbd>@@
-  =kill-sexp=: @@html:<kbd>@@C-M-k@@html:</kbd>@@, delete forward one sexp
-  =transpose-sexp=: @@html:<kbd>@@C-M-t@@html:</kbd>@@
-  =backward-up-list=: @@html:<kbd>@@C-M-u@@html:</kbd>@@, move up out of an sexp
-  =down-list=: @@html:<kbd>@@C-M-d@@html:</kbd>@@, move down into a nested sexp
-  =backward-list=: @@html:<kbd>@@C-M-p@@html:</kbd>@@, match parentheses backward
-  =pp-eval-last-sexp=: pretty print

** Frame
   :PROPERTIES:
   :CUSTOM_ID: frame
   :END:

-  find file other frame: @@html:<kbd>@@C-x 5 C-f@@html:</kbd>@@, or
   @@html:<kbd>@@C-x 5 f@@html:</kbd>@@
-  display buffer other frame: @@html:<kbd>@@C-x 5 C-o@@html:</kbd>@@,
   or @@html:<kbd>@@C-x 5 b@@html:</kbd>@@
-  find tag other frame: @@html:<kbd>@@C-x 5 .@@html:</kbd>@@
-  delete frame: @@html:<kbd>@@C-x 5 0@@html:</kbd>@@
-  delete other frames: @@html:<kbd>@@C-x 5 1@@html:</kbd>@@
-  make frame command: @@html:<kbd>@@C-x 5 2@@html:</kbd>@@
-  dired to other frame: @@html:<kbd>@@C-x 5 d@@html:</kbd>@@
-  other frame: @@html:<kbd>@@C-x 5 o@@html:</kbd>@@
-  find file read only other frame: @@html:<kbd>@@C-x 5 r@@html:</kbd>@@

** Window
   :PROPERTIES:
   :CUSTOM_ID: window
   :END:

#+REVEAL: split
- /find/ file: @@html:<kbd>@@C-x C-f@@html:</kbd>@@
- /view/ file: @@html:<kbd>@@C-x C-v@@html:</kbd>@@
- /write/ file: @@html:<kbd>@@C-x C-w@@html:</kbd>@@

#+REVEAL: split
- save /current/ buffer: @@html:<kbd>@@C-x s@@html:</kbd>@@
- save all /modified/ buffers: @@html:<kbd>@@C-u C-x s@@html:</kbd>@@
- save and /backup/ current buffer: @@html:<kbd>@@C-x C-s@@html:</kdb>@@

#+REVEAL: split
- kill a buffer: @@html:<kbd>@@C-x k@@html:</kbd>@@
- other window: @@html:<kbd>@@C-x o@@html:</kbd>@@
- dired other window: @@html:<kbd>@@C-x 4 d@@html:</kbd>@@
- find file in other window: @@html:<kbd>@@C-x 4 C-f@@html:</kbd>@@, or
  @@html:<kbd>@@C-x 4 f@@html:</kbd>@@

#+REVEAL: split
- display buffer: @@html:<kbd>@@C-x 4 C-o@@html:</kbd>@@, display the
  buffer in another window
- find tag other window: @@html:<kbd>@@C-x 4 .@@html:</kbd>@@
- kill buffer and window: @@html:<kbd>@@C-x 4 0@@html:</kbd>@@, just
  like @@html:<kbd>@@C-x 0@@html:</kbd>@@ except kill the buffer

#+REVEAL: split
- switch to buffer other window: @@html:<kbd>@@C-x 4 b@@html:</kbd>@@
- clone indirect buffer other window:
	@@html:<kbd>@@C-x 4 c@@html:</kbd>@@, clone the buffer in another window
- recenter the screen at cursor: @@html:<kbd>@@C-l@@html:</kbd>@@
- center the screen at the top: @@html:<kbd>@@C-u 0 C-l@@html:</kbd>@@
- recenter the screen at the bottom: @@html:<kbd>@@C-u - C-l@@html:</kbd>@@

** Register
   :PROPERTIES:
   :CUSTOM_ID: register
   :END:

#+ATTR_HTML: :style text-align:left
- store /window/ configuration to register: @@html:<kbd>@@C-x r w
  <REG>@@html:</kbd>@@, but the configuration cannot accross sessions.
- store /frame/ configuration to register: @@html:<kbd>@@C-x r f
  <REG>@@html:</kbd>@@
- store /region/ into register: @@html:<kbd>@@C-x r s
  <REG>@@html:</kbd>@@
- store current /point/ in register: @@html:<kbd>@@C-x r SPC
  <REG>@@html:</kbd>@@

#+REVEAL: split
- /jump to/ register: @@html:<kbd>@@C-x r j <REG>@@html:</kbd>@@
- /insert from/ register: @@html:<kbd>@@C-x r i <REG>@@html:</kbd>@@
- /view/ the content of register: @@html:<kbd>@@M-x view-register
  <REG>@@html:</kbd>@@

** Bookmark
   :PROPERTIES:
   :CUSTOM_ID: bookmark
   :END:

#+ATTR_HTML: :style text-align:left
Unlike registers, bookmarks have long names, and they persist
automatically from one Emacs session to the next.

- set bookmark: @@html:<kbd>@@C-x r m@@html:</kbd>@@
- set named bookmark: @@html:<kbd>@@C-x r m BOOKMARK@@html:</kbd>@@
- jump to bookmark: @@html:<kbd>@@C-x r b BOOKMARK@@html:</kbd>@@
- list all bookmarks: @@html:<kbd>@@C-x r l@@html:</kbd>@@
- save bookmark to file: @@html:<kbd>@@M-x bookmark-save@@html:</kbd>@@

** Rectangle
   :PROPERTIES:
   :CUSTOM_ID: rectangle
   :END:

- /kill/ rectangle: @@html:<kbd>@@C-x r k@@html:</kbd>@@
- /delete/ rectangle: @@html:<kbd>@@C-x r d@@html:</kbd>@@
- /yank/ rectangle: @@html:<kbd>@@C-x r y@@html:</kbd>@@
- /open/ rectangle: @@html:<kbd>@@C-x r o@@html:</kbd>@@, insert blank
  /space/ to fill the space of the region-rectangle
- /clear/ rectangle: @@html:<kbd>@@C-x r c@@html:</kbd>@@

#+REVEAL: split
- /replace/ rectangle: @@html:<kbd>@@C-x r t@@html:</kbd>@@
- /string insert/ rectangle: @@html:<kbd>@@C-x r g@@html:</kbd>@@
- /numbers insert/ rectangle: @@html:<kbd>@@C-x r N@@html:</kbd>@@

#+REVAL: split
- select entire buffer: @@html:<kbd>@@C-x h@@html:</kbd>@@
- select page: @@html:<kbd>@@C-x C-p@@html:</kbd>@@
- exchange cursor position and mark: @@html:<kbd>@@C-x C-x@@html:</kbd>@@ 

** Keyboard Macro
   :PROPERTIES:
   :CUSTOM_ID: keyboard-macro
   :END:

- /start/ recording macro: @@html:<kbd>@@C-x (@@html:</kbd>@@
- /stop/ recording macro: @@html:<kbd>@@C-x )@@html:</kbd>@@
- /playback/ macro: @@html:<kbd>@@C-x e@@html:</kbd>@@
- apply macro to /region/: @@html:<kbd>@@C-x C-k r@@html:</kbd>@@
- /edit/ last marcro: @@html:<kbd>@@C-x C-k RET@@html:</kbd>@@
- /bind/ the most recent macro to a key: @@html:<kbd>@@C-x C-k b
  [1-9A-Z]@@html:</kbd>@@

** Dired
   :PROPERTIES:
   :CUSTOM_ID: dired
   :END:

#+REVEAL: split
- hide details: @@html:<kbd>@@(@@html:</kbd>@@
- change marks: @@html:<kbd>@@* c @@html:</kbd>@@
- toggle readonly: @@html:<kbd>@@C-x C-q@@html:</kbd>@@
- finish edit: @@html:<kbd>@@C-c C-c@@html:</kbd>@@
- abort editing: @@html:<kbd>@@C-c C-k@@html:</kbd>@@

#+REVEAL: split
- browse file: @@html:<kbd>@@b@@html:</kbd>@@
- echo current directory: @@html:<kbd>@@W@@html:</kbd>@@
- hex edit file: @html:<kbd>@@f@@html:</kbd>@@

#+REVEAL: split
- /find/ regexp recusive: @@html:<kbd>@@A@@html:</kbd>@@
- /replace/ regexp recusive: @@html:<kbd>@@Q@@html:</kbd>@@

** Regexp
   :PROPERTIES:
   :CUSTOM_ID: regexp
   :END:

- regexp builder: @@html:<kbd>@@M-x regexp-builder@@html:</kbd>@@

** Shell
   :PROPERTIES:
   :CUSTOM_ID: mnemonic-shell
   :END:

- EShell: @@html:<kbd>@@M-x eshell@@html:</kbd>@@
- Shell: @@html:<kbd>@@M-x shell@@html:</kbd>@@
- Ansi-Term: @@html:<kbd>@@M-x ansi-term@@html:</kbd>@@

#+REVAL: split
- interrupt process in =eshell=: @@html:<kbd>@@C-c C-c@@html:</kbd>@@
- interrupt process in =shell=: @@html:<kbd>@@C-c C-c@@html:</kbd>@@
- interrupt process in =ansi-term=: @@html:<kbd>@@C-x C-c@@html:</kbd>@@

** Remote
   :PROPERTIES:
   :CUSTOM_ID: remote
   :END:

#+ATTR_HTML: :style text-align:left
It's the duty of [[https://www.gnu.org/software/tramp/][TRAMP]].

- non-sudo: @@html:<kbd>@@C-x C-f
  /ssh:user@host:/path/to/file@@html:</kbd>@@, such as =user@host= or
  =user= in .ssh/config entries.
- sudo remote: @@html:<kbd>@@C-x C-f
  /ssh:user|sudo:localhost:/path/to/file@@html:</kbd>@@, such as
  =user@localhost=, here =localhost= means remote host.
- sudo localhost: @@html:<kbd>@@C-x C-f
  /sudo:user@localhost:/path/to/file@@html:</kbd>@@
#+REVEAL: split
- eshell remote: @@html:<kbd>@@cd
  /ssh:user@host:/path/to/file@@html:</kbd>@@
- on Windows use =~/.ssh/config=: use =/sshx:= instead, such as
  @@html:<kbd>@@/sshx:user@host:/path/to/file@@html:</kbd>@@

** Sort
   :PROPERTIES:
   :CUSTOM_ID: sort
   :END:

- sort /fields/: @@html:<kbd>@@C-c s f@@html:</kbd>@@ by Nth field
- sort /lines/: @@html:<kbd>@@C-c s l@@html:</kbd>@@
- /reverse/ region: @@html:<kbd>@@C-c s r@@html:</kbd>@@

** Face
   :PROPERTIES:
   :CUSTOM_ID: face
   :END:

- describe the face at point: @@html:<kbd>@@M-x
  describe-face@@html:</kbd>@@

#+ATTR_HTML: :style text-align:left
*** Text scale
- reset face height: @@html:<kbd>@@C-x C-0@@html:</kbd>@@
- increase face height: @@html:<kbd>@@C-x C-=@@html:</kbd>@@
- decrease face height: @@html:<kbd>@@C-x C--@@html:</kdd>@@

** LaTeX Requirements
   :PROPERTIES:
   :CUSTOM_ID: latex-requirements
   :END:

*** On Darwin
- [[https://www.imagemagick.org/][ImageMagick]] 
- texlive-basic
- texlive-fonts-recommended
- texlive-latex-extra 
- texlive-latex-recommended
- texlive-pictures
- texlive-plain-generic

*** On Ubuntu
- [[https://www.imagemagick.org/][ImageMagick]]
- [[https://www.tug.org/texlive/][texlive]]
- texlive-latex-extra: additional packages.
- texlive-lang-cjk: supporting a combination of Chinese, Japanese,
  Korean, including macros, fonts, documentation.
- texlive-xetex

*** On Windows
- [[https://www.imagemagick.org/][ImageMagick]]
- MiKTex

** Log
   :PROPERTIES:
   :CUSTOM_ID: log
   :END:

- =tail -f=: @@html:<kbd>@@M-x auto-revert-tail-mode@@html:</kbd>@@
- toggle highlighting of the current line: @@html:<kbd>@@M-x
  hl-line-mode@@html:</kbd>@@
- /narrow/ region: @@html:<kbd>@@C-x n n@@html:</kdb>@@
- /widen/ region: @@html:<kbd>@@C-x n w@@html:</kbd>@@
* Issues?

If you have issues, just post it.
