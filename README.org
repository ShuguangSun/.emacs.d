#+TITLE: More Reasonable Emacs
#+AUTHOR: Junjie Mars
#+STARTUP: overview
#+OPTIONS: toc:2

* Quick start
  :PROPERTIES:
  :CUSTOM_ID: quick-start
  :END:

	[[https://api.travis-ci.org/junjiemars/.emacs.d][https://api.travis-ci.org/junjiemars/.emacs.d.svg?branch=master]]
	

It's works on Emacs version 22.1.1+ , provides more reasonable style:
how to organize Elisp code perfectly. You can run it on any
environment Emacs itself runs on: GUI or Terminal, even you can run
multiple Emacs instances with different version on the same machine
and at the same time.

- clone More Reasonable Emacs from github

#+BEGIN_SRC sh
git clone --depth=1 https://github.com/junjiemars/.emacs.d.git ~/.emacs.d
#+END_SRC

- open Emacs, after Emacs compile all elisp files, then reopen Emacs
- want more functionalities see [[#cooking][Cooking]] section

One more thing, it's best to remind you: take care, it's super fast.

- [[#story][Story]]
- [[#cooking][Cooking]]
- [[#programming][Programming]]
- [[#troubleshoting][Troubleshoting]]
- [[#mnemonic][Mnemonic]]

* Story
  :PROPERTIES:
  :CUSTOM_ID: story
  :END:

I'm a nerd with Emacs, it's awesome if I can [[http://edward.oconnor.cx/2009/07/learn-emacs-in-ten-years][Learn Emacs in less then
Ten Years]].  So, I decided to start from Level One not the Level Zero
after read Emacs' tutorial (C-h t). Emacs is the most powerful editor
on the world there is no *one of*, it's programmable, elegant and
/self-documenting/, so you can start from Level Zero if you had time
may be less than 10 years to read and try Emacs.

After falling in love with [[https://en.wikipedia.org/wiki/Lisp_(programming_language)][Lisp]], I know it's the time to make Emacs
being a part of my body and mind, not just open a file, navigating,
editing, and save it. The Level One of mine start from [[https://github.com/flyingmachine/emacs-for-clojure][this is a
Clojure-friendly emacs config]], and [[https://github.com/purcell/emacs.d][A reasonable Emacs config]]. But,
those ones neither can suit for my daily use on different machines.

The More Reasonable Emacs strives to be fast, stable and hacker
friendly, which can be run on anywhere where Emacs runs.

- [[#highlights][Highlights]]
- [[#requirements][Requirements]]
- [[#where][Where]]
- [[#what][What]]
- [[#install][Install]]
- [[#organization][Organization]]


Now, let's start from the Level Two. And one more thing: teach
yourself some little Elisp (M-x info).

** Highlights
   :PROPERTIES:
   :CUSTOM_ID: highlights
   :END:

- *Carefully designed*: robust, fast and just load what's your want.
- *Adaptive*: can run on any OS, GUI or Terminal, from most recent
  Emacs's versions to ancient ones, and one Emacs's configuration suit
  for all coexisting Emacs on the same machine.
- *Consistent*: wherever and whenever you can play with Emacs always
  behaves in the same way.
- *Awesome style*: [[https://github.com/junjiemars/images/blob/master/.emacs.d/dracula-theme-on-windows.png][Windows]], [[https://github.com/junjiemars/images/blob/master/.emacs.d/dracula-theme-on-darwin.png][Darwin]], and [[https://github.com/junjiemars/images/blob/master/.emacs.d/dracula-theme-on-linux.png][Linux]]


** Requirements
   :PROPERTIES:
   :CUSTOM_ID: requirements
   :END:

- Emacs 22.1.1+
- Keyboard+

** Where
   :PROPERTIES:
   :CUSTOM_ID: where
   :END:

- Linux, whatever GUI or Terminal
- Darwin, whatever GUI or Terminal
- Windows, whatever GUI or Terminal
- Raspberry Pi, Terminal
- No Network
- Docker container
- Run multiple Emacs instances with multiple versions in the same
  machine and at the same time

** What
   :PROPERTIES:
   :CUSTOM_ID: what
   :END:

- You are the master of your Emacs, ...
- Navigating, finding, grepping in the same way wherever, ...
- Org Mode that's your new life, ...
- Reliable programming experiments, C, Lisp, ...
- Bash on Windows, ...

** Install
   :PROPERTIES:
   :CUSTOM_ID: install
   :END:

Just one thing you need to do, clone it (just <500KB) to your HOME
directory:

#+BEGIN_SRC sh
git clone --depth=1 https://github.com/junjiemars/.emacs.d.git ~/.emacs.d
#+END_SRC

First run More Reasonable Emacs, it should automatically do: 
- byte compile elisp source files. 
- install packages, if you allow it.


After first run More Reasonable Emacs, exit and then /reopen/ Emacs.


On Windows, if you'd [[https://git-scm.com/downloads][Git-Bash]] installed but no Emacs, you are lucky, a
one line code will do it all for you and more: fix some Emacs' issue
for you, and you don't need run =git clone ...=,

instead,

#+BEGIN_SRC sh
HAS_EMACS=1 bash <(curl https://raw.githubusercontent.com/junjiemars/kit/master/win/install-win-kits.sh)
#+END_SRC

Now, it will works perfectly, but if you want to more control and more
features, such as themes, packages, and fonts etc., see next section:
[[#cooking][cooking]]

** Organization
   :PROPERTIES:
   :CUSTOM_ID: organization
   :END:

Annotated your Emacs HOME as =(emacs-home*)=.

Your private configuration directory at =(emacs-home* "private/")=.
All things under it you can rename, move, delete.

All Elisp files should be compiled, if you meet some trouble, a magic
function =(clean-compiled-files)= should help, run it and reopen the
Emacs.

*** Directory

#+BEGIN_EXAMPLE
    (emacs-home*)
    ├── LICENSE
    ├── README.md
    ├── config (comment "all stuff here")
    ├── elpa (comment "installed packages")
    ├── init.el (comment "Emacs init file")
    ├── mnemonic.md
    ├── private (comment "your configuration can put here")
    │   ├── self-env-spec.el
    │   ├── self-epilogue.el
    │   ├── self-package-spec.el
    │   ├── self-path.el
    │   ├── self-prologue.el
    └── theme (comment "themes directory")
#+END_EXAMPLE

Locate your spec via =(emacs-home* "private/self-path.el")=.

#+BEGIN_SRC emacs-lisp
    ;; Run order: :env-spec -> :prelogue -> :package-spec -> :epilogue
    ;; You can point to your Gited Emacs' configuration repo.
    ;; Default samples `self-*.el' in `(emacs-home* "private/")' directory.
    ;; :epilogue run in `after-init-hook'


    (def-self-path-ref
      :env-spec (emacs-home* "private/self-env-spec.el")
      :prologue (comment (emacs-home* "private/self-prologue.el"))
      :package-spec (comment (emacs-home* "private/self-package-spec.el"))
      :epilogue (comment (emacs-home* "private/self-epilogue.el")))
      
#+END_SRC

Directories with =.= prefix are for the module that need store configuration or cached files.

#+BEGIN_EXAMPLE
    (emacs-home*)
    ├── .backup
    ├── .bookmarks
    ├── .desktop
    ├── .dired
    ├── .eshell
    ├── .exec (comment "executable")
    ├── .games
    ├── .ido
    ├── .image-dired
    ├── .mail
    ├── .minibuffer
    ├── .places
    ├── .recentf
    ├── .save
    ├── .semantic
    ├── .semanticdb
    ├── .server
    ├── .tags
    ├── .tramp
    └── .url

#+END_EXAMPLE

*** Naming

Introduce rules of naming /files/ and /functions/ 

**** Files

- core: single word and simple name
#+BEGIN_EXAMPLE
    (emacs-home* "config/")
    ├── autoload.el
    ├── basic.el
    ├── boot.el
    ├── memory.el
    ├── module.el
    ├── shells.el
    └── strap.el
#+END_EXAMPLE
- extension for Emacs builtin packages: =<package-name>s=
#+BEGIN_EXAMPLE
    (emacs-home* "config/")
    ├── eshells.el
    └── tags.el
#+END_EXAMPLE
- autoload extension for Emacs builtin packages: =on-<package-name>-autoload.el=
#+BEGIN_EXAMPLE
    (emacs-home* "config/")
    ├── on-compile-autoload.el
    ├── on-dired-autoload.el
    ├── on-edit-autoload.el
    ├── on-eww-autoload.el
    ├── on-hippie-autoload.el
    ├── on-indent-autoload.el
    ├── on-linum-autoload.el
    ├── on-lisp-autoload.el
    └── on-semantic-autoload.el
#+END_EXAMPLE
- extension for non Emacs builtin packages: =use-<package-name>-autoload.el=
#+BEGIN_EXAMPLE
    (emacs-home* "config/")
    ├── use-cider-autoload.el
    ├── use-cider.el
    ├── use-inf-clojure.el
    ├── use-lfe-autoload.el
    ├── use-magit-autoload.el
    ├── use-python.el
    ├── use-slime-autoload.el
    └── use-slime.el
#+END_EXAMPLE
- samples: =samples-self-*.el=
#+BEGIN_EXAMPLE
    (emacs-home* "config/")
    ├── sample-self-env-spec.el
    ├── sample-self-epilogue.el
    ├── sample-self-package-spec.el
    ├── sample-self-path.el
    └── sample-self-prologue.el
#+END_EXAMPLE

**** Functions

- *v-* prefix: functions or macros for versioned directories, such as
  =(v-home*)=
- *_* prefix: functions or macros only existing in compile-time, such
  as =_mark-thing@=
- /*/ or /**/ suffix: extensions of Emacs' builtin function or macro,
  such as =(alist-get*)= and =assoc**=
- *%* suffix: macro be expanded at compile time, such as =(v-home%)=
- *!* suffix: function or macro may change environment state, such as
  =(v-home!)=
- *@* suffix: position related functions or macros, such as
  =mark-symbol@=

* Cooking
   :PROPERTIES:
   :CUSTOM_ID: cooking
   :END:

- [[#theme][Theme]]
- [[#font][Font]]
- [[#cooking-shell][Shell]]
- [[#session][Session]]
- [[#socks][Socks]]
- [[#package][Package]]
- [[#indent][Indent]]
- [[#file][File]]
- [[#edit][Edit]]
- [[#keys][Keys]]


** Theme
    :PROPERTIES:
    :CUSTOM_ID: theme
    :END:

Easy to switch themes, or try a new one.

The theme's spec locate in =(emacs-home* "private/self-env-spec.el")=
by default.

#+BEGIN_SRC emacs-lisp
(def-self-env-spec
  :theme (list :name 'dracula
               :custom-theme-directory (emacs-home* "theme/")
               :compile nil
               :allowed t))
#+END_SRC

- =:name= name of theme, does not need /-theme.el/ suffix
- =:custom-theme-directory= where custom theme files located
- =:compile= =t= compile theme, compiled theme more smooth and more faster
	if you had already confirmed the theme is secure.
- =:allowed= =t= enabled, =nil= disabled


Using Emacs's builtin themes /tango-dark/ :

#+BEGIN_SRC emacs-lisp
(def-self-env-spec
  :theme (list :name 'tango-dark ;; builtin theme
               :custom-theme-directory nil
               :compile nil
               :allowed t))
#+END_SRC


/screenshots/:
- [[https://raw.githubusercontent.com/junjiemars/images/master/.emacs.d/default-theme-on-windows.png][default theme]]
- [[https://raw.githubusercontent.com/junjiemars/images/master/.emacs.d/dracula-theme-on-windows.png][dracula theme]]
- [[https://raw.githubusercontent.com/junjiemars/images/master/.emacs.d/tango-dark-theme-on-windows.png][tango-dark theme]]

** Font
    :PROPERTIES:
    :CUSTOM_ID: font
    :END:

Easy to swtich fonts and [[https://en.wikipedia.org/wiki/CJK_characters][CJK]] characters, or try a new one. The default
encoding is [[https://en.wikipedia.org/wiki/UTF-8][UTF-8]].

The font's spec locate in =(emacs-home* "private/self-env-spec.el")=
by default and for GUI mode only.

#+BEGIN_SRC emacs-lisp
(def-self-env-spec
  :font (list :name (platform-supported-if 'darwin
                        "Monaco-14"
                      (platform-supported-if 'windows-nt
                          "Consolas-13"
                        "DejaVu Sans Mono-12")) 
              :allowed t))
#+END_SRC

- =:name= string of font name and font size
- =:allowed= =t= enabled, =nil= disabled


/screenshots/:
- [[https://raw.githubusercontent.com/junjiemars/images/master/.emacs.d/cjk-font-on-darwin.png][CJK font]]
- [[https://raw.githubusercontent.com/junjiemars/images/master/.emacs.d/monaco-font-on-darwin.png][Monaco font]]
- [[https://raw.githubusercontent.com/junjiemars/images/master/.emacs.d/consolas-font-on-windows.png][Consolas font]]

** Shell
    :PROPERTIES:
    :CUSTOM_ID: cooking-shell
    :END:

*** shell

Suppport any =SHELL=, copying environment variables into Emacs
environment.

[[https://github.com/purcell/exec-path-from-shell][exec-path-from-shell]] has a poor implementation for the same
functionalities, it is unstable and slow. But here, We had a better
one.

The shell spec locate in =(emacs-home* "private/self-env-spec.el")= by
default

#+BEGIN_SRC emacs-lisp
:shell (list :env-vars `("JAVA_HOME"
                         "PYTHONPATH"
                         "RACKET_HOME"
                         "PATH"
                         ,(platform-supported-unless 'windows-nt
                            (platform-supported-if 'darwin
                                "DYLD_LIBRARY_PATH"
                              "LD_LIBRARY_PATH")))
             :options '("--login") ;; '("-i" "2>/dev/null")
             :exec-path t
             :shell-file-name (eval-when-compile (executable-find "bash"))
             :allowed nil)
#+END_SRC

- =:env-vars= copy what environment variables from shell to Emacs
- =:options= a list of shell's options
- =:exec-path= copy =$PATH= or =%PATH%= to =exec-path=
- =:shell-file-name= where the shell program located, it should be
  specified when =:env-vars= is non nil
- =:allowed= =t= allowed, =nil= disabled

*** eshell
    :PROPERTIES:
    :CUSTOM_ID: eshell
    :END:

The eshell spec locate in =(emacs-home* "private/self-env-spec.el")=
by default.

#+BEGIN_SRC emacs-lisp
(def-self-env-spec
  :eshell (list :visual-commands '("mtr")
                :destroy-buffer-when-process-dies t
                :visual-subcommands '(("git" "log"))
                :visual-options nil
                :allowed t))
#+END_SRC

- =:visual-commands= @@html:<kbd>@@C-h-v eshell-visual-commands@@html:</kbd>@@
- =:destroy-buffer-when-process-dies= @@html:<kbd>@@C-h-v eshell-destroy-buffer-when-process-dies@@html:</kbd>@@
- =:visual-subcommands= @@html:<kbd>@@C-h-v eshell-visual-subcommands@@html:</kbd>@@
- =:visual-options= @@html:<kbd>@@C-h-v eshell-visual-options@@html:</kbd>@@
- =:allowed= =t= allowed, =nil= disabled

** Session
    :PROPERTIES:
    :CUSTOM_ID: session
    :END:

The desktop spec locate in =(emacs-home* "private/self-env-spec.el")=
by default.

#+BEGIN_SRC emacs-lisp
    (def-self-env-spec
      :desktop (list :files-not-to-save
                     ".*\.t?gz\\|\.desktop\\|~$\\|\\/ssh[: ]\\|\.elc$"
                     :buffers-not-to-save "^TAGS\\|\\.log"
                     :modes-not-to-save
                     '(dired-mode fundamental-mode rmail-mode)
                     :restore-eager 8
                     :restore-via-threading* (platform-supported-if 'darwin
                                               (terminal-supported-p t)
                                               t)
                     :allowed t))
#+END_SRC

- =:files-not-to-save= @@html:<kbd>@@C-h-v desktop-files-not-to-save@@html:</kbd>@@
- =:buffers-not-to-save= @@html:<kbd>@@C-h-v desktop-buffers-not-to-save@@html:</kbd>@@
- =:modes-not-to-save= @@html:<kbd>@@C-h-v desktop-modes-not-to-save@@html:</kbd>@@
- =:restore-eager= @@html:<kbd>@@C-h-v desktop-restore-eager@@html:</kbd>@@
- =:restore-via-threading*=: restore via a new thread
- =:allowed= =t= enabled, =nil= disabled

** Socks
    :PROPERTIES:
    :CUSTOM_ID: socks
    :END:

Using socks proxy when installing packages or browsing web pages.

The socks spec locate in =(emacs-home* "private/self-env-spec.el")= by
default.

#+BEGIN_SRC emacs-lisp
(def-self-env-spec
  :socks (list :port 32000
               :server "127.0.0.1"
               :version 5
               :allowed nil))
#+END_SRC

- =:port= the port of socks proxy server
- =:server= the address of socks proxy server
- =:version= socks version
- =:allowed= =t= enabled, =nil= disabled

If =:allowed t=, =url-gateway-method= should be switch to =socks= when
Emacs initializing. After Emacs initialization, you can =toggle-socks!=
and no matter =:allowed= is =t= or =nil=.

** Package
    :PROPERTIES:
    :CUSTOM_ID: package
    :END:

Don't tell me [[https://github.com/jwiegley/use-package][use-package]], it's trying to redefine Emacs. Here you can
find more simpler and faster way to implement almost functionalities
that =use-pacakge= does.

There are two types of packages: /basic/ (just like Emacs' builtin)
and /user defined/. To disable /user defined/ packages in
=(def-self-path-ref)=, to disable both /basic/ and /user defined/
packages can be done in =(def-self-env-spec)=.

#+BEGIN_SRC emacs-lisp
(def-self-env-spec
  :package (list :remove-unused nil
                 :allowed nil))
#+END_SRC


The /user defined/ package spec default locate in =(emacs-home*
"private/self-package-spec.el")= by default.

#+BEGIN_SRC emacs-lisp
(def-self-package-spec
  (list
   :cond t
   :packages '(markdown-mode htmlize org-tree-slide))
  (list
   :cond (executable-find% "latex")
   :packages '(auctex cdlatex))
  (list
   :cond (and (version-supported-p <= 24.4)
              (executable-find% "java"))
   :packages '(cider
               clojure-mode
               clojure-mode-extra-font-locking)
   :compile `(,(compile-unit% (emacs-home* "config/use-cider.el") t)
              ,(compile-unit% (emacs-home* "config/use-cider-autoload.el"))))
  (list
   :cond (and (version-supported-p <= 24.4)
              (executable-find% "docker"))
   :packages '(dockerfile-mode
               docker-tramp))
  (list
   :cond (executable-find% "erlc")
   :packages '(erlang))
  (list
   :cond (and (executable-find% "erlc")
              (executable-find% "lfe"))
   :packages '(lfe-mode)
   :compile `(,(compile-unit% (emacs-home* "config/use-lfe-autoload.el"))))
  (list
   :cond (and (terminal-supported-p t)
              (platform-supported-unless 'darwin t)
              (version-supported-p <= 25.1))
   :packages '(ereader))
  (list
   :cond (and (version-supported-p <= 24.4)
              (executable-find% "git"))
   :packages '(magit)
   :compile `(,(compile-unit% (emacs-home* "config/use-magit-autoload.el"))))
  (list
   :cond (and (version-supported-p <= 23.2)
              (or (executable-find% "racket")
                  (executable-find% "chicken")))
   :packages '(geiser))
  (list
   :cond (or (executable-find% "sbcl"))
   :packages '(slime)
   :compile `(,(compile-unit% (emacs-home* "config/use-slime.el"))
              ,(compile-unit% (emacs-home* "config/use-slime-autoload.el")))))
#+END_SRC

- =:cond= decide whether to install =:packages= or compile =:compile=
- =:packages= a list of package names or tar file names
- =:compile= when installed packages, a list of files that should be
  compiled only or be loaded after be compiled

You can use any =Elisp= functions after aboved keywords.
- =version-supported-p= macro checking the version of current Emacs at
  compile time
- =executable-find%= macro checking the exising of the /executable/ at
  compile time
- =compile-unit%= macro specify the compiling file to compile or
  compile then load

** Indent
    :PROPERTIES:
    :CUSTOM_ID: indent
    :END:

Avoiding a war. If /whitespace/ causes some trouble, you can swith to
@@html:<kbd>@@M-x whitespace-mode@@html:</kbd>@@ to find out.

#+BEGIN_SRC emacs-lisp
(def-self-env-spec
  :edit (list :tab-width 2
              :auto-save-default nil
              :allowed t))
#+END_SRC

- =:tab-width= default @@html:<kbd>@@C-h-v tab-width@@html:</kbd>@@
- =:auto-save-default= @@html:<kbd>@@C-h-v auto-save-default@@html:</kbd>@@
- =:allowed= =t= enabled, =nil= disabled

** File
    :PROPERTIES:
    :CUSTOM_ID: file
    :END:

Using =dired= as a File Manager is awesome, same experiences on
Windows, Darwin and Linux.


*** ls Program

For Windows, there are no built-in =ls= program, but you can install
GNU's =ls= via [[https://git-scm.com/downloads][Git-Bash]].

For Darwin, let =dired= don't do stupid things.


/screenshots/:
- [[https://raw.githubusercontent.com/junjiemars/images/master/.emacs.d/ido-dired-windows-gnu-ls.png][ido-dired]]

*** find Program

On Windows, if GNU's =find= has already in your disk, and let Windows
stupid =find= or =findstr= program go away.  Don't =setq=
=find-program= on Windows, because =dired= can not differ the cases
between local and remote.

Now, on Windows you can use @@html:<kbd>@@M-x find-dired@@html:</kbd>@@
or @@html:<kbd>@@M-x find-name-dired@@html:</kbd>@@

/screenshots/:
- [[https://raw.githubusercontent.com/junjiemars/images/master/.emacs.d/find-name-dired-on-windows.png][find-name-dired]]
- [[https://raw.githubusercontent.com/junjiemars/images/master/.emacs.d/find-name-dired-tramp-on-windows.png][find-name-dired via tramp]]

*** compress Program

On Windows, there are no builtin =zip/unzip= program, but Emacs ship
with =minizip= program.  Although =minizip= without /recursive/
functionalities, but do some tricks with =minizip=, we can zip files
and directories with =minizip=, even export =org= to =odt=
[[https://en.wikipedia.org/wiki/OpenDocument][OpenDocument]]. And more [[https://www.7-zip.org/download.html][7-Zip standalone command version also be
supported]].

On Windows, there are logical bugs in =dired-aux.el=, We can not using
=Z= key compress or uncompress file to or from =.gz= or =.7z=. The
good news: if =gunzip= or =7za= installed we can do it now.

You can using @@html:<kbd>c@@html:</kbd>@@ in =dired mode= compress to
=*.gz=, =*.7z= or =*.zip=. For some ancient Emacs24-, @@html:<kbd>@@!
zip x.zip ?@@html:</kbd>@@ to zip.

It's headache when =default-file-name-coding-system= not equal with
=locale-coding-system= specifically on Windows. Even view archived
file in =arc-mode=, will display wrong encoded file names.

On Windows, there are some encoding issues when
~default-file-name-coding-system~ not equal ~locale-coding-system~.
- display non-unicode encoded directory name or file name;
- insert non-unicode encoded directory;
- compress the files with with ~locale-coding-system~ filenames;
- ~dired-do-shell-command~ or ~dired-do-async-shell-command~;

The good news is all those issues had gone in this kit.

For =.rar= archive, emacs really sucks. 
- on Emacs 23.3.1, using =unrar-free= in =archive-rar-summarize=
  function, but on Emacs 26.1 using =lsar=, and those all had been
  hard coded in =arc-mode.el=.
- =7z l= output is not compatible with =lsar= and =unrar=.


/screenshots/:
- [[https://raw.githubusercontent.com/junjiemars/images/master/.emacs.d/dired-do-compress-to-zip-on-windows.png][dired-do-compress-to: zip]]
- [[https://raw.githubusercontent.com/junjiemars/images/master/.emacs.d/dired-do-compress-to-7z-on-windows.png][dired-do-compress-to: 7z]]
- [[https://raw.githubusercontent.com/junjiemars/images/master/.emacs.d/archive-summarize-files-zip-on-windows.png][archive-summarize-files: zip]]
- [[https://raw.githubusercontent.com/junjiemars/images/master/.emacs.d/archive-summarize-files-7z-on-windows.png][archive-summarize-files: 7z]]
- [[https://raw.githubusercontent.com/junjiemars/images/master/.emacs.d/org-odt-export-to-odt-on-windows.png][org-odt-export-to-odt]]
- [[https://raw.githubusercontent.com/junjiemars/images/master/.emacs.d/dired-compress-file-suffixes-version-24lt.png][dired-compress-file-suffixes]]

** Edit
	 :PROPERTIES:
	 :CUSTOM_ID: edit
	 :END:


*** Mark
	 :PROPERTIES:
	 :CUSTOM_ID: edit-mark
	 :END:
	 
Provides the abilities to mark /symbol/, /filename/ and /line/ in
current buffer then you can @@html:<kbd>@@M-w@@html:</kbd>@@ the
marked part.

Using =mark-list@= to mark Lisp /sexp/ or C /block/. And using
=mark-defun@= to mark whole function definition. You can do those
things for other major modes not only Elisp.

- @@html:<kbd>@@C-c m s@@html:</kbd>@@ [[https://raw.githubusercontent.com/junjiemars/images/master/.emacs.d/mark-symbol.png][mark symbol at point]]
- @@html:<kbd>@@C-c m f@@html:</kbd>@@ [[https://raw.githubusercontent.com/junjiemars/images/master/.emacs.d/mark-filename.png][mark filename at point]]
- @@html:<kbd>@@C-c m w@@html:</kbd>@@ [[https://raw.githubusercontent.com/junjiemars/images/master/.emacs.d/mark-word.png][mark word at point]]
- @@html:<kbd>@@C-c m l@@html:</kbd>@@ [[https://raw.githubusercontent.com/junjiemars/images/master/.emacs.d/mark-line.png][mark line at point]]
- @@html:<kbd>@@C-c m a@@html:</kbd>@@ [[https://raw.githubusercontent.com/junjiemars/images/master/.emacs.d/mark-list.png][mark list at point]]
- @@html:<kbd>@@C-c m d@@html:</kbd>@@ [[https://raw.githubusercontent.com/junjiemars/images/master/.emacs.d/mark-defun.png][mark defun at point]]

*** Tags
	 :PROPERTIES:
	 :CUSTOM_ID: edit-tags
	 :END:

Prefer =etags= program, because it works well on varied platforms. In
=(emacs-home* "config/tags.el")=, there are some handy functions to
create the tags for =Elisp= or =C= source code, such as
=make-emacs-source-tags=, =make-system-c-tags=, and =mount-tags=.

More Reasonable Emacs also supports [[http://ctags.sourceforge.net/][Exuberant Ctags]].

*** Clipboard
	 :PROPERTIES:
	 :CUSTOM_ID: edit-clipboard
	 :END:

In terminal, Emacs can not /copy to/ or /paste from/ system clipboard
when on Darwin or Linux. For such cases, we need external programs to
help us do the job. Now, More Reasonable Emacs integrates this
functionalities, so we can use natrual keys (such as
@@html:<kbd>@@C-w@@html:</kbd>@@, @@html:<kbd>@@C-y@@html:</kbd>@@) to
/copy to/ or /paste from/ system clipboard.

*** iSearch
	 :PROPERTIES:
	 :CUSTOM_ID: edit-isearch
	 :END:

There are no uniformed [[https://www.emacswiki.org/emacs/IncrementalSearch][isearch]] functionalites among in
=isearch-forward=, =isearch-forward-symbol-at-point= and
=isearch-backward=. Now, in More Reasonable Emacs those functionalites
unified to two functions: =isearch-forward*= and =isearch-backward*=.

In More Reasonable Emacs, we can search the text of activated
*region*, the *symbol* at point forward or backward. By default,
@@html:<kbd>@@C-s@@html:</kbd>@@ and @@html:<kbd>@@C-r@@html:</kbd>@@
will search current symbol at point forward or backward just like
/vi/'s @@html:<kbd>@@*@@html:</kbd>@@ and
@@html:<kbd>@@#@@html:</kbd>@@ does. If there are a activated region
then @@html:<kbd>@@C-s@@html:</kbd>@@ and
@@html:<kbd>@@C-r@@html:</kbd>@@ will search the activated region
forward or backward.

- @@html:<kbd>@@C-s@@html:</kbd>@@ do incremental search region or
  symbol at point by default. If there are no activated region or
  symbol at point do raw incremental search. If @@html:<kbd>@@C-u
  C-s@@html:</kbd>@@ do incremental regexp search.
- @@html:<kbd>@@C-r@@html:</kbd>@@ do incremental search region or
  symbol at point.
- @@html:<kbd>@@C-u C-s@@html:</kbd>@@ or @@html:<kbd>@@C-u
  C-r@@html:</kbd>@@ do raw incremental search forward or backward.

*** Open line
	 :PROPERTIES:
	 :CUSTOM_ID: edit-open-line
	 :END:

Emulates /vi/'s *o* and *O* command in Emacs, the built-in one
=open-line= or =split-line= do not indent accordingly the current
line. See [[https://www.emacswiki.org/emacs/OpenNextLine][Open Next Line]].

- @@html:<kbd>@@C-o@@html:</kbd>@@ =open-next-line=
- @@html:<kbd>@@C-M-o@@html:</kbd>@@ =open-previous-line=
- @@html:<kbd>@@M-x toggle-open-line-indent!@@html:</kbd>@@

** Keys
	 :PROPERTIES:
	 :CUSTOM_ID: keys
	 :END:

Obey the defaults of Emacs' keymap.

*** Global keys

Global for all Emacs' version.

- @@html:<kbd>@@M-/@@html:</kbd>@@ =hippie-expand=
- @@html:<kbd>@@C-c ;@@html:</kbd>@@ =toggle-comment=
- @@html:<kbd>@@C-c f f@@html:</kbd>@@ =find-file-at-point=
- @@html:<kbd>@@C-c r b@@html:</kbd>@@ =revert-buffer=
- @@html:<kbd>@@C-o@@html:</kbd>@@ =open-next-line=
- @@html:<kbd>@@C-M-o@@html:</kbd>@@ =open-previous-line=	
- @@html:<kbd>@@C-c m s@@html:</kbd>@@: =mark-symbol@=
- @@html:<kbd>@@C-c m l@@html:</kbd>@@: =mark-line@=
- @@html:<kbd>@@C-c m f@@html:</kbd>@@: =mark-filename@=
- @@html:<kbd>@@C-c m d@@html:</kbd>@@: =mark-defun@=
- @@html:<kbd>@@C-s@@html:</kbd>@@: =isearch-forward*=
- @@html:<kbd>@@C-r@@html:</kbd>@@: =isearch-backward*=

*** Compatible keys

Compatibled for ancient Emacs versions, compatible keys may not
avaiabled on ancient Emacs.
		
- @@html:<kbd>@@M-,@@html:</kbd>@@ =pop-tag-mark=
- @@html:<kbd>@@M-*@@html:</kbd>@@ =tags-loop-continue=
- @@html:<kbd>@@C-l@@html:</kbd>@@ =recenter-top-bottom=
- @@html:<kbd>@@C-c l@@html:</kbd>@@ =linum-mode=
- @@html:<kbd>@@M-#@@html:</kbd>@@ =xref-find-references=

*** Featured keys

The features provided by 3rd packages, featured keys may not avaiabled
on ancient Emacs.

- @@html:<kbd>@@C-c v s@@html:</kbd>@@ =magit-status=

* Programming
	:PROPERTIES:
	:CUSTOM_ID: programming
	:END:
	
** Elisp programming
	 :PROPERTIES:
	 :CUSTOM_ID: programming_elisp_programming
	 :END:
** C programming
	 :PROPERTIES:
	 :CUSTOM_ID: c-programming
	 :END:

Prefer Emacs buitin [[https://www.gnu.org/software/emacs/manual/html_mono/ccmode.html][CC mode]] and [[https://www.gnu.org/software/emacs/manual/html_node/semantic/Semantic-mode.html][Semantic mode]] for /editing/ C code. [[https://github.com/junjiemars/.emacs.d/][More
Reasonable Emacs]] has builtin support for [[https://www.gnu.org/software/emacs/manual/html_node/semantic/Semantic-mode.html][Semantic mode]] to find correct
system include paths.

Using @@html:<kbd>@@M-x compile@@html:</kbd>@@ to /make/.

[[https://docs.microsoft.com/en-us/windows-hardware/drivers/debugger/][cdb]] and [[https://lldb.llvm.org/][lldb]] debuggers had been perfect integrated with Emacs.


C programing with Emacs should be awesome if [[https://github.com/junjiemars/nore][Nore]] already on your
machine.

/screenshots/:
- [[https://raw.githubusercontent.com/junjiemars/images/master/.emacs.d/c-programming-editing-on-darwin-gui.png][editing on Darwin]]
- [[https://raw.githubusercontent.com/junjiemars/images/master/.emacs.d/c-programming-compile-on-windows.png][compile via msvc]]
- [[https://raw.githubusercontent.com/junjiemars/images/master/.emacs.d/c-programming-debugging-via-lldb-on-darwin.png][debugging via lldb on Darwin]]
- [[https://raw.githubusercontent.com/junjiemars/images/master/.emacs.d/c-programming-debugging-via-lldb-on-linux.png][debugging via lldb on Ubuntu]]	
- [[https://raw.githubusercontent.com/junjiemars/images/master/.emacs.d/c-programming-debugging-via-cdb-on-windows.png][debugging via cdb]]

*** Find C system include
		:PROPERTIES:
		:CUSTOM_ID: find-c-system-include
		:END:

=system-cc-include= function used to find system include files for
gcc, clang and msvc.

*** C macro expand
		:PROPERTIES:
		:CUSTOM_ID: c-macro-expand
		:END:

=c-macro-expand=: @@html:<kbd>@@C-c C-e@@html:</kbd>@@ for gcc, clang
and msvc.

On Windows, the msvc's compiler =cl= does not support retrieve input
from stdin, so =c-macro-expansion= function sucks. But if there are
GNU's =xargs=, we can resolve this problem.

/screenshots/:
- [[https://raw.githubusercontent.com/junjiemars/images/master/.emacs.d/c-programming-macro-expansion-on-windows.png][macro expansion for msvc]]

** Common Lisp programming
	 :PROPERTIES:
	 :CUSTOM_ID: programming_common_lisp_programming
	 :END:
** Scheme programming
	 :PROPERTIES:
	 :CUSTOM_ID: programming_scheme_programming
	 :END:

* Troubleshoting
   :PROPERTIES:
   :CUSTOM_ID: troubleshoting
   :END:

1. Check Emacs configurations: 
  - @@html:<kbd>@@M: system-configuration-options@@html:</kbd>@@
  - @@html:<kbd>@@M: system-configuration-features@@html:</kbd>@@
  - @@html:<kbd>@@M: features@@html:</kbd>@@
	- @@html:<kbd>@@M: load-history@@html:</kbd>@@
2.  @@html:<kbd>@@M: (clean-compiled-files)@@html:</kbd>@@ then exit and reopen Emacs.
3.  Check =*Compilation-Log*= buffer, then do #2.
4.  Disable the problematic item in =(emacs-home* "private/self-path.el")=, then do #2.

* Mnemonic
	:PROPERTIES:
	:CUSTOM_ID: mnemonic
	:END:

- [[#emacs-documents][Emacs Documents]]
- [[#motion][Motion]]
- [[#interaction][Interaction]]
- [[#editing][Editing]]
- [[#coding][Coding]]
- [[#basic-sexp-commands][Basic sexp commands]]
- [[#frame][Frame]]
- [[#window][Window]]
- [[#register][Register]]
- [[#bookmarks][Bookmarks]]
- [[#region-and-rectangle][Region and Rectangle]]
- [[#keyboard-macro][Keyboard Macro]]
- [[#dired][Dired]]
- [[#mnemonic-shell][Shell]]
- [[#remote][Remote]]
- [[#latex-requirements][LaTex Requirements]]
- [[#tips][Tips]]
- [[file:README.org][Readme]]

** Emacs Documents
   :PROPERTIES:
   :CUSTOM_ID: emacs-documents
   :END:

It's *self-documenting* and great, keep reading it frequently.

- Tutorial: @@html:<kbd>@@C-h-t@@html:</kbd>@@
- Help for Help: @@html:<kbd>@@C-h C-h@@html:</kbd>@@
- Emacs manual: @@html:<kbd>@@C-h r@@html:</kbd>@@
- Apropos command: @@html:<kbd>@@C-h a@@html:</kbd>@@
- Info: @@html:<kbd>@@C-h i@@html:</kbd>@@
- Info of mode: @@html:<kbd>@@C-h i d m @@html:</kbd>@@
- Mode: @@html:<kbd>@@C-h-m@@html:</kbd>@@ see all the key bindings and
  documentation of current buffer
- Where is command: @@html:<kbd>@@C-h w@@html:</kbd>@@ which keystrokes
  binding to a given command
- Function: @@html:<kbd>@@C-h-f@@html:</kbd>@@ display documentation of
  the given function
- Variable: @@html:<kbd>@@C-h-v@@html:</kbd>@@ display documentation of
  the given variable
- Keybinding: @@html:<kbd>@@C-h-k@@html:</kbd>@@ display documentation
  of the function invoked by the given keystrokes
- Prefix keybindings: @@html:<kbd>@@@@html:<prefix>@@
  C-h@@html:</kbd>@@ see all key bindings for given prefix keystrokes
- Keybinding briefly: @@html:<kbd>@@C-h c@@html:</kbd>@@, which command
  for given keystroke
- Message: @@html:<kbd>@@C-h e@@html:</kbd>@@ see the logging of echo
  area message
- Man: @@html:<kbd>@@M-x man@@html:</kbd>@@ view UNIX manual page
- Woman: @@html:<kbd>@@M-x woman@@html:</kbd>@@ view UNIX manual page
  without =man= program
- Coding system: @@html:<kbd>@@C-h C@@html:</kbd>@@ describe coding
  system
- Colors: @@html:<kbd>@@M-x list-colors-display@@html:</kbd>@@ display
  names of defined colors and show what they look like
- Keystrokes: @@html:<kbd>@@C-h l@@html:</kbd>@@ display last 100 input keystrokes

** Motion
   :PROPERTIES:
   :CUSTOM_ID: motion
   :END:

- goto line: @@html:<kbd>@@M-g g@@html:</kbd>@@
- goto nth char: @@html:<kbd>@@M-g c@@html:</kbd>@@
- jump between buffers: @@html:<kbd>@@C-x C-@@@html:</kbd>@@, jumps to
  the global mark acrross buffers
- jump in buffer: @@html:<kbd>@@C-u C-@@@html:</kbd>@@
- jump to definition: @@html:<kbd>@@M-.@@html:</kbd>@@
- pop back to where @@html:<kbd>@@M-,@@html:</kbd>@@

** Interaction
   :PROPERTIES:
   :CUSTOM_ID: interaction
   :END:

-  =*scratch*= buffer
-  via Elisp: @@html:<kbd>@@M-:@@html:</kbd>@@
-  via Shell command: @@html:<kbd>@@M-!@@html:</kbd>@@, insert shell
   output: @@html:<kbd>@@C-u M-!@@html:</kbd>@@, see /Info>Emacs>Shell/
-  in Dired mode: @@html:<kbd>@@!@@html:</kbd>@@, do shell command
-  region as input to Shell command: @@html:<kbd>@@M-|@@html:</kbd>@@,
   insert from shell output: @@html:<kbd>@@C-u M-|@@html:</kbd>@@
-  browse-url: @@html:<kbd>@@C-c b@@html:</kbd>@@
-  filename of current buffer: =(buffer-file-name (current-buffer))=

** Editing
   :PROPERTIES:
   :CUSTOM_ID: editing
   :END:

- write file: @@html:<kbd>@@C-x C-w@@html:</kbd>@@ same as save as
- kill whole line: @@html:<KBD>@@C-S-DEL@@html:</KBD>@@
- kill all spaces at point: @@html:<kbd>@@M-\@@html:</kbd>@@
- kill all spaces except one at point: @@html:<KBD>@@M-SPC@@html:</KBD>@@
- delete indentation to join line to previous line:
	@@html:<kbd>@@M-^@@html:</kbd>@@
- join next line: @@html:<kbd>@@C-u 1 M-^@@html:</kbd>@@
- dynamic abbreviation: @@html:<kbd>@@M-/@@html:</kbd>@@
- query replace: @@html:<kbd>@@M-%@@html:</kbd>@@
- what cursor position: @@html:<kbd>@@C-x =@@html:</kbd>@@
- upcase region: @@html:<kbd>@@C-x C-u@@html:</kbd>@@
- downcase region: @@html:<kbd>@@C-x C-l@@html:</kbd>@@
- transpose characters: @@html:<kbd>@@C-t@@html:</kbd>@@
- transpose words: @@html:<kbd>@@M-t@@html:</kbd>@@
- transpose lines: @@html:<kbd>@@C-x C-t@@html:</kbd>@@
- insert parentheses: @@html:<kbd>@@M-(@@html:</kbd>@@, wrap selection in parentheses
- toggle read-only mode: @@html:<kbd>@@C-x C-q@@html:</kbd>@@
- toggle input method: @@html:<kbd>@@C-\@@html:</kbd>@@
- set input method: @@html:<kbd>@@C-x RET C-\@@html:</kbd>@@
- describe current input method: @@html:<kbd>@@C-h I@@html:</kbd>@@
- insert char: @@html:<kbd>@@C-x 8 RET@@html:</kbd>@@ GREEK SMALL LETTER LAMBDA
- quoted insert: @@html:<kbd>@@C-q@@html:</kbd>@@, such as page break
  @@html:<kbd>@@C-q C-l@@html:</kbd>@@, use @@html:<kbd>@@C-x [@@html:</kbd>@@ to backward or @@html:<kbd>@@C-x ]@@html:</kbd>@@ to forward
- check unmatched parentheses: @@html:<kbd>@@M-x check-parens@@html:</kbd>@@
- tab to space: @@html:<kbd>@@M-x untabify@@html:</kbd>@@
- space to tab: @@html:<kbd>@@M-x tabify@@html:</kbd>@@
- fill paragraph: @@html:<kbd>@@M q@@html:</kbd>@@
- redo after undo: @@html:<kbd>@@C-g@@html:</kbd>@@ and then
	@@html:<kbd>@@C-x u@@html:</kbd>@@
- cancel: @@html:<kbd>@@C-]@@html:</kbd>@@, or
	 @@html:<kbd>M-x top-level@@html:</kbd>@@
- open new line before current: @@html:<kbd>@@C-o@@html:</kbd>@@
- remove all but one empty line: @@html:<kbd>@@C-x C-o@@html:</kbd>@@
- delete entire line: @@html:<kbd>@@C-S-DEL@@html:</kbd>@@
- delete to end of sentence: @@html:<kbd>@@M-k@@html:</kbd>@@

** Coding
	 :PROPERTIES:
	 :CUSTOM_ID: coding
	 :END:

- check current buffer coding system: @@html:<kbd>@@M-:
  buffer-file-coding-system@@html:</kbd>@@
- revert current buffer's coding system: @@html:<kbd>@@M-x C-x RET
  r@@html:</kbd>@@

** Basic sexp commands
   :PROPERTIES:
   :CUSTOM_ID: basic-sexp-commands
   :END:

-  =forward-sexp=: @@html:<kbd>@@C-M-f@@html:</kbd>@@
-  =backward-sexp=: @@html:<kbd>@@C-M-b@@html:</kbd>@@
-  =kill-sexp=: @@html:<kbd>@@C-M-k@@html:</kbd>@@, delete forward one sexp
-  =transpose-sexp=: @@html:<kbd>@@C-M-t@@html:</kbd>@@
-  =backward-up-list=: @@html:<kbd>@@C-M-u@@html:</kbd>@@, move up out of an sexp
-  =down-list=: @@html:<kbd>@@C-M-d@@html:</kbd>@@, move down into a nested sexp
-  =backward-list=: @@html:<kbd>@@C-M-p@@html:</kbd>@@, match parentheses backward
-  =pp-eval-last-sexp=: pretty print

** Frame
   :PROPERTIES:
   :CUSTOM_ID: frame
   :END:

-  find file other frame: @@html:<kbd>@@C-x 5 C-f@@html:</kbd>@@, or
   @@html:<kbd>@@C-x 5 f@@html:</kbd>@@
-  display buffer other frame: @@html:<kbd>@@C-x 5 C-o@@html:</kbd>@@,
   or @@html:<kbd>@@C-x 5 b@@html:</kbd>@@
-  find tag other frame: @@html:<kbd>@@C-x 5 .@@html:</kbd>@@
-  delete frame: @@html:<kbd>@@C-x 5 0@@html:</kbd>@@
-  delete other frames: @@html:<kbd>@@C-x 5 1@@html:</kbd>@@
-  make frame command: @@html:<kbd>@@C-x 5 2@@html:</kbd>@@
-  dired to other frame: @@html:<kbd>@@C-x 5 d@@html:</kbd>@@
-  other frame: @@html:<kbd>@@C-x 5 o@@html:</kbd>@@
-  find file read only other frame: @@html:<kbd>@@C-x 5 r@@html:</kbd>@@

** Window
   :PROPERTIES:
   :CUSTOM_ID: window
   :END:

- write file: @@html:<kbd>@@C-x C-w@@html:</kbd>@@
- save all buffers: @@html:<kbd>@@C-x s@@html:</kbd>@@
- insert a file into buffer: @@html:<kbd>@@C-x i@@html:</kbd>@@
- kill current buffer and open another file:
	@@html:<kbd>@@C-x C-v@@html:</kbd>@@
- kill a buffer: @@html:<kbd>@@C-x k@@html:</kbd>@@
- other window: @@html:<kbd>@@C-x o@@html:</kbd>@@
- dired other window: @@html:<kbd>@@C-x 4 d@@html:</kbd>@@
- find file in other window: @@html:<kbd>@@C-x 4 C-f@@html:</kbd>@@, or
  @@html:<kbd>@@C-x 4 f@@html:</kbd>@@
- display buffer: @@html:<kbd>@@C-x 4 C-o@@html:</kbd>@@, display the
  buffer in another window
- find tag other window: @@html:<kbd>@@C-x 4 .@@html:</kbd>@@
- kill buffer and window: @@html:<kbd>@@C-x 4 0@@html:</kbd>@@, just
  like @@html:<kbd>@@C-x 0@@html:</kbd>@@ except kill the buffer
- switch to buffer other window: @@html:<kbd>@@C-x 4 b@@html:</kbd>@@
- clone indirect buffer other window:
	@@html:<kbd>@@C-x 4 c@@html:</kbd>@@, clone the buffer in another window
- recenter the screen at cursor: @@html:<kbd>@@C-l@@html:</kbd>@@
- center the screen at the top: @@html:<kbd>@@C-u 0 C-l@@html:</kbd>@@
- recenter the screen at the bottom: @@html:<kbd>@@C-u - C-l@@html:</kbd>@@

** Register
   :PROPERTIES:
   :CUSTOM_ID: register
   :END:

The content of Register cannot accross sessions.

- store /window/ configuration to register: @@html:<kbd>@@C-x r w <REG>@@html:</kbd>@@
- store /frame/ configuration to register: @@html:<kbd>@@C-x r f <REG>@@html:</kbd>@@
- store current location of point in register: @@html:<kbd>@@C-x r SPC <REG>@@html:</kbd>@@
- /jump/ to register: @@html:<kbd>@@C-x r j <REG>@@html:</kbd>@@
- /store/ region into register: @@html:<kbd>@@C-x r s <REG>@@html:</kbd>@@
- /insert from/ register: @@html:<kbd>@@C-x r i <REG>@@html:</kbd>@@
- /view/ the content of register: @@html:<kbd>@@M-x view-register <REG>@@html:</kbd>@@
** Bookmarks
   :PROPERTIES:
   :CUSTOM_ID: bookmarks
   :END:

Unlike registers, bookmarks have long names, and they persist
automatically from one Emacs session to the next.

-  set bookmark: @@html:<kbd>@@C-x r m@@html:</kbd>@@
-  set named bookmark: @@html:<kbd>@@C-x r m BOOKMARK@@html:</kbd>@@
-  jump to bookmark: @@html:<kbd>@@C-x r b BOOKMARK@@html:</kbd>@@
-  list all bookmarks: @@html:<kbd>@@C-x r l@@html:</kbd>@@
-  save bookmark to file: @@html:<kbd>@@M-x bookmark-save@@html:</kbd>@@

** Region and Rectangle
   :PROPERTIES:
   :CUSTOM_ID: region-and-rectangle
   :END:

- kill rectangle: @@html:<kbd>@@C-x r k@@html:</kbd>@@
- delete rectangle: @@html:<kbd>@@C-x r d@@html:</kbd>@@
- yank rectangle: @@html:<kbd>@@C-x r y@@html:</kbd>@@
- open rectangle: @@html:<kbd>@@C-x r o@@html:</kbd>@@, insert blank
  space to fill the space of the region-rectangle
- clear rectangle: @@html:<kbd>@@C-x r c@@html:</kbd>@@
- string rectangle: @@html:<kbd>@@C-x r t@@html:</kbd>@@, replace
  rectangle contents with STRING on each line
- string insert rectangle: @@html:<kbd>@@C-x r g@@html:</kbd>@@
- @@html:<kbd>@@M-x delete-whitespace-rectangle@@html:</kbd>@@
- select entire buffer: @@html:<kbd>@@C-x h@@html:</kbd>@@
- select page: @@html:<kbd>@@C-x C-p@@html:</kbd>@@
- exchange cursor position and mark: @@html:<kbd>@@C-x C-x@@html:</kbd>@@ 

** Keyboard Macro
   :PROPERTIES:
   :CUSTOM_ID: keyboard-macro
   :END:

-  start recording macro: @@html:<kbd>@@C-x (@@html:</kbd>@@
-  stop recording macro: @@html:<kbd>@@C-x )@@html:</kbd>@@
-  playback macro: @@html:<kbd>@@C-x e@@html:</kbd>@@
-  apply macro to region lines: @@html:<kbd>@@C-x C-k r@@html:</kbd>@@

** Dired
   :PROPERTIES:
   :CUSTOM_ID: dired
   :END:

-  hide details: @@html:<kbd>@@(@@html:</kbd>@@
-  change marks: @@html:<kbd>@@* c @@html:</kbd>@@

** Shell
   :PROPERTIES:
   :CUSTOM_ID: mnemonic-shell
   :END:

- EShell: @@html:<kbd>@@M-x eshell@@html:</kbd>@@
- Shell: @@html:<kbd>@@M-x shell@@html:</kbd>@@
- Ansi-Term: @@html:<kbd>@@M-x ansi-term@@html:</kbd>@@
- kill process in =ansi-term=: @@html:<kbd>@@C-x C-c@@html:</kbd>@@

** Remote
   :PROPERTIES:
   :CUSTOM_ID: remote
   :END:

It's the duty of [[https://www.gnu.org/software/tramp/][TRAMP]]

- non-sudo: @@html:<kbd>@@C-x C-f /ssh:user@host:/path/to/file@@html:</kbd>@@, such as =user@host= or =user= in .ssh/config entries.

- sudo: @@html:<kbd>@@C-x C-f /ssh:user|sudo:localhost:/path/to/file@@html:</kbd>@@, such as =user@localhost=, here =localhost= means remote host.

- eshell remote: @@html:<kbd>@@cd /ssh:user@host:/path/to/file@@html:</kbd>@@

- on Windows use =~/.ssh/config=: use =/sshx:= instead, such as  @@html:<kbd>@@/sshx:user@host:/path/to/file@@html:</kbd>@@
	
** LaTex Requirements
   :PROPERTIES:
   :CUSTOM_ID: latex-requirements
   :END:

*** On Darwin
- [[https://www.imagemagick.org/][ImageMagick]] 
- texlive-basic
- texlive-fonts-recommended
- texlive-latex-extra 
- texlive-latex-recommended
- texlive-pictures
- texlive-plain-generic

*** On Ubuntu
- [[https://www.imagemagick.org/][ImageMagick]]
- [[https://www.tug.org/texlive/][texlive]]
- texlive-latex-extra: additional packages.
- texlive-lang-cjk: supporting a combination of Chinese, Japanese, Korean, including
 macros, fonts, documentation.

*** On Windows
- [[https://www.imagemagick.org/][ImageMagick]]
- MiKTex

** Tips
   :PROPERTIES:
   :CUSTOM_ID: tips
   :END:

** Insert Region
     :PROPERTIES:
     :CUSTOM_ID: insert-region
     :END:

#+BEGIN_EXAMPLE
aaaa 43 2
aaaa 74 1
aaaa 32 5
aaaa 22 5
aaaa 35 4
aaaa  7 9
aaaa 23 3
aaaa 20 7
aaaa 92 3
aaaa 86 6
#+END_EXAMPLE

Insert 5 lines with prefix =aaaa= random-number =[0-100)=
random-number =[0-10)=, =eval-expression=
@@html:<kbd>@@M-:@@html:</kbd>@@, then type the following code in
/mini buffer/.


#+BEGIN_SRC lisp
(dotimes (x 5) (insert (format "aaaa %2s %s\n" (random 100) (random 10))))
#+END_SRC

** Sort Region
   :PROPERTIES:
   :CUSTOM_ID: sort-region
   :END:

#+BEGIN_EXAMPLE
aaaa 8 3
aaaa 7 9
aaaa 4 5
aaaa 6 3
aaaa 8 0
#+END_EXAMPLE

Sort by 2nd field: @@html:<kbd>@@C-u 2 M-x sort-fields@@html:</kbd>@@

#+BEGIN_EXAMPLE
aaaa 4 5
aaaa 6 3
aaaa 7 9
aaaa 8 3
aaaa 8 0
#+END_EXAMPLE

** Reverse Region
	 :PROPERTIES:
	 :CUSTOM_ID: reverse-region
	 :END:

#+BEGIN_EXAMPLE
aaaa 9
aaaa 6
aaaa 1
aaaa 1
aaaa 0
#+END_EXAMPLE

Select the above region, then @@html:<kbd>@@M-x reverse-region@@html:</kbd>@@

#+BEGIN_EXAMPLE
aaaa 0
aaaa 1
aaaa 1
aaaa 6
aaaa 9
#+END_EXAMPLE

